{"version":3,"sources":["etoj-game.js","jtoe-game.js","adjective-type-game.js","adjective-conj-present-game.js","adjective-conj-past-game.js","adjective-conj-te-game.js","verb-conj-present-game.js","verb-conj-past-game.js","verb-conj-te-game.js","kanji-reading-game.js","kanji-definition-game.js","kwtoe-game.js","kwtoj-game.js","options-component.js","index.js"],"names":["EngToJapGame","props","word","question","english","kanaAnswer","hiragana","romajiAnswer","romaji","state","userAnswer","answered","correct","enterHandler","event","preventDefault","this","toLowerCase","replace","determineReasonableAnswers","concat","includes","setState","target","value","str","reasonableAnswers","push","code","nextHandler","handleEnter","document","addEventListener","removeEventListener","resultColor","resultAnswer","type","onClick","class","onSubmit","answerHandler","autoFocus","onChange","typeHandler","React","Component","JapToEngGame","answer","answers","split","forEach","ans","AdjectiveTypeGame","solution","match","newState","Object","assign","AdjConjPresentGame","getRandomInt","conjugateKana","wanakana","max","Math","floor","random","posNeg","result","AdjConjPastGame","AdjConjTeGame","U_CONVERSION_TABLE","VerbConjPresentGame","length","VerbConjPastGame","VerbConjTeGame","KanjiReadingGame","kanji","kanaReadings","romajiReadings","answerCombos","i","map","KanjiDefinitionGame","definitions","KanjiWordToEngGame","KanjiWordToJapGame","OptionsComponent","title","identifier","callback","options","dividedOptions","keys","key","col","elems","colItems","name","checked","populate","obj","keyPath","lastKeyIndex","MainMenu","optionsHandler","startHandler","lessons","games","ResultsMenu","resetHandler","total","results","resultsList","localCorrect","localTotal","localName","round","MainView","display","validWordTypes","words","wordPool","gamePool","activeWord","currentGame","totalGames","correctGames","loadWords","fetch","headers","then","response","json","parsedWords","element","edition","lesson","values","game","filter","index","indexOf","buildGamePool","buildWordPool","numGames","console","log","category","selectGame","alert","activeWordRomaji","activeWordType","wordType","wordKey","selectedGame","findValidGame","validGames","id","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.50c1d17b.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nexport default class EngToJapGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.english;\n        const kanaAnswer = word.hiragana;\n        const romajiAnswer = word.romaji;\n\n        this.state = {\n            question: question,\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(\" \", \"\");\n        const reasonableAnswers = this.determineReasonableAnswers(kanaAnswer).concat(this.determineReasonableAnswers(romajiAnswer));\n        let correct = false;\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    determineReasonableAnswers(str) {\n        const reasonableAnswers = [];\n        \n        str = str.toLowerCase();\n        reasonableAnswers.push(str);\n\n        str = str.replace(/\\s*[＋+].*/giu, \"\");\n        reasonableAnswers.push(str);\n\n        str = str.replace(\"~\", \"\");\n        str = str.replace(\".\", \"\");\n        str = str.replace(\"'\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        reasonableAnswers.push(str.replace(/\\s*\\([^)]*\\)\\s*/giu, \"\"))\n\n        str = str.replace(\"(\", \"\");\n        str = str.replace(\")\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        return reasonableAnswers;\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What is the Japanese word for this?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What is the Japanese word for this?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class JapToEngGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const answer = word.english;\n\n        this.state = {\n            question: question,\n            answer: answer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const answer = this.state.answer.toLowerCase().replace(/[.~[\\s?'’]+/giu, \"\");\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s?'’]+/giu, \"\");\n        const answers = answer.split(';');\n        let correct = false;\n        let reasonableAnswers = [];\n        reasonableAnswers.push(answer);\n        answers.forEach(ans => {\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans));\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans.replace('-', ' ')));\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans.replace('-', '')));\n        });\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    determineReasonableAnswers(str) {\n        const reasonableAnswers = [];\n\n        reasonableAnswers.push(str);\n\n        str = str.replace(/\\s*[＋+].*/giu, \"\");\n        reasonableAnswers.push(str);\n\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        reasonableAnswers.push(str.replace(/\\s*\\([^)]*\\)\\s*/giu, \"\"))\n\n        str = str.replace(\"(\", \"\");\n        str = str.replace(\")\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        return reasonableAnswers;\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const answer = this.state.answer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What is the English definition of this word?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer in English, punctuation and capitalization is ignored.</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{answer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is '\" + answer + \"'.\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What is the English definition of this word?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class AdjectiveTypeGame extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const word = this.props.word;\n        let question;\n        let answer;\n        let solution;\n        if (word.type === \"na-adjective\") {\n            question = word.hiragana.match(/.*(?=\\s\\(な\\))/giu)[0];\n            answer = question + \"（な）\";\n            solution = 'な';\n        } else {\n            question = word.hiragana.match(/.*(?=い$)/giu)[0];\n            answer = question + \"（い）\";\n            solution = 'い';\n        }\n\n        this.state = {\n            question: question,\n            answer: answer,\n            solution: solution,\n            answered: false,\n            correct: false\n        }\n    }\n\n    answerHandler(answer) {\n        const solution = this.state.solution;\n        let correct = false;\n\n        if (answer === solution) {\n            correct = true;\n        }\n\n        const newState = Object.assign({}, this.state);\n        newState.correct = correct;\n        newState.answered = true;\n        this.setState(newState);\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const answer = this.state.answer;\n        const solution = this.state.solution;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What type of adjective is this? (な/い)</h3>\n                    <div>\n                        <h2>{question}<span class=\"red\">（　）</span></h2>\n                    </div>\n                    <div class=\"center-text\">\n                        <button class=\"btn bg-gray\" onClick={() => this.answerHandler(\"な\")}>な</button>\n                        <button class=\"btn bg-gray\" onClick={() => this.answerHandler(\"い\")}>い</button>\n                    </div>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct! This is a \" + solution + \" adjective!\";\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. This is a \" + solution + \" adjective!\";\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What type of adjective is this? (な/い)</h3>\n                    <div>\n                        <h2><span class={resultColor}>{answer}</span></h2>\n                        <h3>{resultAnswer}</h3>\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as wanakana from 'wanakana';\n\nexport default class AdjConjPresentGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const type = this.getRandomInt(2);\n        const kanaAnswer = this.conjugateKana(word, type);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            type: (type === 0) ? \"affirmative\" : \"negative\",\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    getRandomInt(max) {\n        return Math.floor(Math.random() * max);\n    }\n\n    conjugateKana(word, posNeg) {\n        let result = word.hiragana;\n        if (word.type === \"na-adjective\") {\n            if (posNeg === 0) {\n                result = result.replace(/\\s\\(な\\)/giu, \"です\");\n            } else {\n                result = result.replace(/\\s\\(な\\)/giu, \"じゃないです\");\n            }\n        } else if (word.type === \"i-adjective\") {\n            if (posNeg === 0) {\n                result = result + \"です\";\n            } else {\n                //special conjugation for ii\n                if (word.hiragana === \"いい\") {\n                    result = \"よくないです\";\n                } else { \n                    result = result.replace(/い$/giu, \"くないです\");\n                }\n            }\n        }\n\n        return result;\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const type = this.state.type;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as wanakana from 'wanakana';\n\nexport default class AdjConjPastGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const type = this.getRandomInt(2);\n        const kanaAnswer = this.conjugateKana(word, type);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            type: (type === 0) ? \"affirmative\" : \"negative\",\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    getRandomInt(max) {\n        return Math.floor(Math.random() * max);\n    }\n\n    conjugateKana(word, posNeg) {\n        let result = word.hiragana;\n        if (word.type === \"na-adjective\") {\n            if (posNeg === 0) {\n                result = result.replace(/\\s\\(な\\)/giu, \"だった\");\n            } else {\n                result = result.replace(/\\s\\(な\\)/giu, \"じゃなかったです\");\n            }\n        } else if (word.type === \"i-adjective\") {\n            if (posNeg === 0) {\n                if (word.hiragana === \"いい\") {\n                    result = \"よかったです\";\n                } else { \n                    result = result.replace(/い$/giu, \"かったです\");\n                }\n            } else {\n                //special conjugation for ii\n                if (word.hiragana === \"いい\") {\n                    result = \"よくなかったです\";\n                } else { \n                    result = result.replace(/い$/giu, \"くなかったです\");\n                }\n            }\n        }\n\n        return result;\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const type = this.state.type;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">past {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">past {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as wanakana from 'wanakana';\n\nexport default class AdjConjTeGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const kanaAnswer = this.conjugateKana(word);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    getRandomInt(max) {\n        return Math.floor(Math.random() * max);\n    }\n\n    conjugateKana(word) {\n        let result = word.hiragana;\n        if (word.type === \"na-adjective\") {\n            result = result.replace(/\\s\\(な\\)/giu, \"で\");\n        } else if (word.type === \"i-adjective\") {\n            if (word.hiragana === \"いい\") {\n                result = \"よくて\";\n            } else { \n                result = result.replace(/い$/giu, \"くて\");\n            }\n        }\n\n        return result;\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">te-form</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">te-form</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as wanakana from 'wanakana';\n\nconst U_CONVERSION_TABLE = {\n    \"う\": \"い\",\n    \"く\": \"き\",\n    \"ぐ\": \"ぎ\",\n    \"す\": \"し\",\n    \"ず\": \"じ\",\n    \"つ\": \"ち\",\n    \"づ\": \"ぢ\",\n    \"ぬ\": \"に\",\n    \"ふ\": \"ひ\",\n    \"ぶ\": \"び\",\n    \"ぷ\": \"ぴ\",\n    \"む\": \"み\",\n    \"る\": \"り\"\n}\n\nexport default class VerbConjPresentGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const type = this.getRandomInt(2);\n        const kanaAnswer = this.conjugateKana(word, type);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            type: (type === 0) ? \"affirmative\" : \"negative\",\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    getRandomInt(max) {\n        return Math.floor(Math.random() * max);\n    }\n\n    conjugateKana(word, posNeg) {\n        let result = word.hiragana;\n        if (word.type === \"ru-verb\") {\n            if (posNeg === 0) {\n                result = result.replace(/る$/giu, \"ます\");\n            } else {\n                result = result.replace(/る$/giu, \"ません\");\n            }\n        } else if (word.type === \"u-verb\") {\n            if (posNeg === 0) {\n                result = result.replace(/.$/giu, U_CONVERSION_TABLE[result[result.length - 1]] + \"ます\")\n            } else if (posNeg === 1) {\n                result = result.replace(/.$/giu, U_CONVERSION_TABLE[result[result.length - 1]] + \"ません\")\n            }\n        } else if (word.type === \"irregular-verb\") {\n            result = result.replace(/する$/giu, \"し\");\n            result = result.replace(/くる$/giu, \"き\");\n\n            if (posNeg === 0) {\n                result += \"ます\";\n            } else if (posNeg === 1) {\n                result += \"ません\";\n            }\n        }\n\n        return result;\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const type = this.state.type;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the formal <span class=\"question-highlight\">present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the formal <span class=\"question-highlight\">present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as wanakana from 'wanakana';\n\nconst U_CONVERSION_TABLE = {\n    \"う\": \"い\",\n    \"く\": \"き\",\n    \"ぐ\": \"ぎ\",\n    \"す\": \"し\",\n    \"ず\": \"じ\",\n    \"つ\": \"ち\",\n    \"づ\": \"ぢ\",\n    \"ぬ\": \"に\",\n    \"ふ\": \"ひ\",\n    \"ぶ\": \"び\",\n    \"ぷ\": \"ぴ\",\n    \"む\": \"み\",\n    \"る\": \"り\"\n}\n\nexport default class VerbConjPastGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const type = this.getRandomInt(2);\n        const kanaAnswer = this.conjugateKana(word, type);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            type: (type === 0) ? \"affirmative\" : \"negative\",\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    getRandomInt(max) {\n        return Math.floor(Math.random() * max);\n    }\n\n    conjugateKana(word, posNeg) {\n        let result = word.hiragana;\n        if (word.type === \"ru-verb\") {\n            if (posNeg === 0) {\n                result = result.replace(/る$/giu, \"ました\");\n            } else {\n                result = result.replace(/る$/giu, \"ませんでした\");\n            }\n        } else if (word.type === \"u-verb\") {\n            if (posNeg === 0) {\n                result = result.replace(/.$/giu, U_CONVERSION_TABLE[result[result.length - 1]] + \"ました\")\n            } else if (posNeg === 1) {\n                result = result.replace(/.$/giu, U_CONVERSION_TABLE[result[result.length - 1]] + \"ませんでした\")\n            }\n        } else if (word.type === \"irregular-verb\") {\n            result = result.replace(/する$/giu, \"し\");\n            result = result.replace(/くる$/giu, \"き\");\n\n            if (posNeg === 0) {\n                result += \"ました\";\n            } else if (posNeg === 1) {\n                result += \"ませんでした\";\n            }\n        }\n\n        return result;\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const type = this.state.type;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the formal <span class=\"question-highlight\">past {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the formal <span class=\"question-highlight\">past {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as wanakana from 'wanakana';\n\nconst U_CONVERSION_TABLE = {\n    \"う\": \"って\",\n    \"く\": \"いて\",\n    \"ぐ\": \"いで\",\n    \"す\": \"して\",\n    \"つ\": \"って\",\n    \"ぬ\": \"んで\",\n    \"ぶ\": \"んで\",\n    \"む\": \"んで\",\n    \"る\": \"って\"\n}\n\nexport default class VerbConjTeGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const kanaAnswer = this.conjugateKana(word);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    getRandomInt(max) {\n        return Math.floor(Math.random() * max);\n    }\n\n    conjugateKana(word) {\n        let result = word.hiragana;\n        if (word.type === \"ru-verb\") {\n            result = result.replace(/る$/giu, \"て\");\n        } else if (word.type === \"u-verb\") {\n            if (word.hiragana === \"いく\") {\n                result = \"いって\";\n            } else {\n                result = result.replace(/.$/giu, U_CONVERSION_TABLE[result[result.length - 1]])\n            }\n        } else if (word.type === \"irregular-verb\") {\n            result = result.replace(/する$/giu, \"して\");\n            result = result.replace(/くる$/giu, \"きて\");\n        }\n\n        return result;\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the <span class=\"question-highlight\">te-form</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the <span class=\"question-highlight\">te-form</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class KanjiReadingGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.kanji;\n        const kanaReadings = word.hiragana;\n        const romajiReadings = word.romaji;\n\n        this.state = {\n            question: question,\n            kanaReadings: kanaReadings,\n            romajiReadings: romajiReadings,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaReadings = this.state.kanaReadings;\n        const romajiReadings = this.state.romajiReadings;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(\" \", \"\");\n        const reasonableAnswers = kanaReadings.split(';').concat(romajiReadings.toLowerCase().split(';'));\n        let correct = false;\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaReadings = this.state.kanaReadings.split(';');\n        const romajiReadings = this.state.romajiReadings.split(';');\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n        let answerCombos = [];\n\n        for (let i = 0; i < kanaReadings.length; i++) {\n            answerCombos.push(kanaReadings[i] + \" / \" + romajiReadings[i]);\n        }\n\n        answerCombos = answerCombos.map(answer => {\n            return (\n                <span class=\"readings-answer\">{answer}</span>\n            );\n        });\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Give any one <span class=\"question-highlight\">reading</span> for the following Kanji.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        {answerCombos}\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect.\";\n                resultAnswer = (\n                    <div>\n                        {answerCombos}\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Give any one <span class=\"question-highlight\">reading</span> for the following Kanji.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class KanjiDefinitionGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.kanji;\n        const definitions = word.english;\n\n        this.state = {\n            question: question,\n            definitions: definitions,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const definitions = this.state.definitions.toLowerCase().replace(/[.~[\\s?']+/giu, \"\");\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\s?']+/giu, \"\");\n        const reasonableAnswers = definitions.split(';');\n        let correct = false;\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const definitions = this.state.definitions.split(';');\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n        let answerCombos = [];\n\n        for (let i = 0; i < definitions.length; i++) {\n            answerCombos.push(definitions[i]);\n        }\n\n        answerCombos = answerCombos.map(answer => {\n            return (\n                <span class=\"readings-answer\">{answer}</span>\n            );\n        });\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Give any one <span class=\"question-highlight\">English definition</span> for the following Kanji.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer in English, punctuation and capitalization is ignored.</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        {answerCombos}\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect.\";\n                resultAnswer = (\n                    <div>\n                        {answerCombos}\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Give any one <span class=\"question-highlight\">English definition</span> for the following Kanji.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class KanjiWordToEngGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.kanji;\n        const answer = word.english;\n\n        this.state = {\n            question: question,\n            answer: answer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const answer = this.state.answer.toLowerCase().replace(/[.~[\\s?'’]+/giu, \"\");\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s?'’]+/giu, \"\");\n        const answers = answer.split(';');\n        let correct = false;\n        let reasonableAnswers = [];\n        reasonableAnswers.push(answer);\n        answers.forEach(ans => {\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans));\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans.replace('-', ' ')));\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans.replace('-', '')));\n        });\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    determineReasonableAnswers(str) {\n        const reasonableAnswers = [];\n\n        reasonableAnswers.push(str);\n\n        str = str.replace(/\\s*[＋+].*/giu, \"\");\n        reasonableAnswers.push(str);\n\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        reasonableAnswers.push(str.replace(/\\s*\\([^)]*\\)\\s*/giu, \"\"))\n\n        str = str.replace(\"(\", \"\");\n        str = str.replace(\")\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        return reasonableAnswers;\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const answer = this.state.answer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What is the English definition of this word containing Kanji?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer in English, punctuation and capitalization is ignored.</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{answer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is '\" + answer + \"'.\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What is the English definition of this word containing Kanji?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class KanjiWordToJapGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.kanji;\n        const kanaAnswer = word.hiragana;\n        const romajiAnswer = word.romaji;\n\n        this.state = {\n            question: question,\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(\" \", \"\");\n        const reasonableAnswers = this.determineReasonableAnswers(kanaAnswer).concat(this.determineReasonableAnswers(romajiAnswer));\n        let correct = false;\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    determineReasonableAnswers(str) {\n        const reasonableAnswers = [];\n        \n        str = str.toLowerCase();\n        reasonableAnswers.push(str);\n\n        str = str.replace(/\\s*[＋+].*/giu, \"\");\n        reasonableAnswers.push(str);\n\n        str = str.replace(\"~\", \"\");\n        str = str.replace(\".\", \"\");\n        str = str.replace(\"'\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        reasonableAnswers.push(str.replace(/\\s*\\([^)]*\\)\\s*/giu, \"\"))\n\n        str = str.replace(\"(\", \"\");\n        str = str.replace(\")\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        return reasonableAnswers;\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What is the reading (hiragana) for this word containing Kanji?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What is the reading (hiragana) for this word containing Kanji?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nconst NUM_PER_COL = 10;\nexport default class OptionsComponent extends React.Component {\n\n    render() {\n        const title = this.props.title;\n        const identifier = this.props.identifier;\n        const type = this.props.type;\n        const callback = this.props.callback;\n        const options = this.props.options;\n        const dividedOptions = [];\n\n        let i = 0;\n        Object.keys(options).forEach(key => {\n            const col = Math.floor(i / NUM_PER_COL); \n            if (!dividedOptions[col]) dividedOptions[col] = {};\n            dividedOptions[col][key] = options[key];\n            i++;\n        });\n\n        const elems = dividedOptions.map(colItems => {\n            const col = Object.keys(colItems).map(key => {\n                return (\n                    <label key={key} class=\"options-item\">\n                    <input type={type} value={key} name={identifier} checked={colItems[key].value} onChange={callback} />\n                    {colItems[key].name}\n                </label>\n                )\n            });\n\n            return (\n                 <div class=\"options-column\">\n                     {col}\n                 </div>\n            );\n        })\n\n        //const elems = Object.keys(options).map((key) => {\n        //    return (\n        //        <label key={key} class=\"options-item\">\n        //            <input type={type} value={key} name={identifier} checked={options[key].value} onChange={callback} />\n        //            {options[key].name}\n        //        </label>\n        //    )\n        //});\n\n        return (\n            <div class=\"options-container\">\n                <div>\n                    <span class=\"bold\">{title}</span>\n                    <div>\n                        {elems}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport EngToJapGame from './etoj-game';\nimport JapToEngGame from './jtoe-game';\nimport AdjectiveTypeGame from './adjective-type-game';\nimport AdjConjPresentGame from './adjective-conj-present-game';\nimport AdjContPastGame from './adjective-conj-past-game';\nimport AdjConjTeGame from './adjective-conj-te-game';\nimport VerbConjPresentGame from './verb-conj-present-game';\nimport VerbConjPastGame from './verb-conj-past-game';\nimport VerbConjTeGame from './verb-conj-te-game';\nimport KanjiReadingGame from './kanji-reading-game';\nimport KanjiDefinitionGame from './kanji-definition-game';\nimport KanjiWordToEngGame from './kwtoe-game';\nimport KanjiWordToJapGame from './kwtoj-game';\nimport OptionsComponent from './options-component';\n\nconst EDITION = 3;\n\nfunction populate(obj, keyPath, value) {\n    let lastKeyIndex = keyPath.length-1;\n    for (var i = 0; i < lastKeyIndex; ++ i) {\n      let key = keyPath[i];\n      if (!(key in obj)){\n        obj[key] = {}\n      }\n      obj = obj[key];\n    }\n    obj[keyPath[lastKeyIndex]] = value;\n }\n\n function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\nclass MainMenu extends React.Component {\n\n    render() {\n        const optionsHandler = this.props.optionsHandler;\n        const startHandler = this.props.startHandler;\n        const lessons = this.props.lessons;\n        const games = this.props.games;\n\n        return (\n            <div class=\"main-menu\">\n                <div class=\"center-text\">\n                    <h1>GENKI Companion</h1>\n                    <h2>Study GENKI vocabulary and conjugation alongside your classes.</h2>\n                </div>\n                <br/>\n                <div class=\"options\">\n                    <OptionsComponent \n                        title=\"Select Lessons\"\n                        identifier=\"lessons\" \n                        options = {lessons}\n                        type=\"checkbox\"\n                        callback={optionsHandler} />\n\n                    <OptionsComponent \n                        title=\"Select Games\" \n                        identifier=\"games\"\n                        options = {games}\n                        type=\"checkbox\"\n                        callback={optionsHandler} />\n                </div>\n                <div class=\"center-text\">\n                    <button class=\"wide-btn bg-green\" onClick={startHandler}>Start</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ResultsMenu extends React.Component {\n\n    render() {\n        const resetHandler = this.props.resetHandler;\n        const correct = this.props.correct;\n        const total = this.props.total;\n        const results = this.props.results;\n        const resultsList = Object.keys(results).map((key) => {\n            const localCorrect = results[key].correct;\n            const localTotal = results[key].total;\n            const localName = results[key].name;\n            return (\n                <div key={localName} class=\"result-item\">\n                    {localName}: {localCorrect}/{localTotal} ({Math.round(localCorrect*1000/localTotal)/10}%)\n                </div>\n            );\n        });\n        return (\n            <div class=\"center-text\">\n                <h1>Results</h1>\n                <h2>Score: {correct}/{total} ({Math.round(correct*1000/total)/10}%)</h2>\n                <div class=\"result-container\">\n                    {resultsList}\n                </div>\n                <button class=\"wide-btn bg-green\" onClick={resetHandler}>Return to Menu</button>\n            </div>\n        );\n    }\n}\n\nclass MainView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            display: \"loading\",\n            lessons: {\n                \"G\": {name: \"Greetings\", value: false},\n                \"L1\": {name: \"Lesson 1\", value: false},\n                \"L2\": {name: \"Lesson 2\", value: false},\n                \"L3\": {name: \"Lesson 3\", value: false},\n                \"L4\": {name: \"Lesson 4\", value: false},\n                \"L5\": {name: \"Lesson 5\", value: false},\n                \"L6\": {name: \"Lesson 6\", value: false},\n                \"L7\": {name: \"Lesson 7\", value: false},\n                \"L8\": {name: \"Lesson 8\", value: false},\n                \"L9\": {name: \"Lesson 9\", value: false},\n            },\n            games: {\n                \"jtoe\": {name: \"Define Japanese in English\", value: false, validWordTypes: [\"adverb\", \"expression\", \"i-adjective\", \"irregular-verb\", \"na-adjective\", \"noun\", \"particle\", \"prefix\", \"ru-verb\", \"suffix\", \"u-verb\"]},\n                \"etoj\": {name: \"Define English in Japanese\", value: false, validWordTypes: [\"adverb\", \"expression\", \"i-adjective\", \"irregular-verb\", \"na-adjective\", \"noun\", \"particle\", \"prefix\", \"ru-verb\", \"suffix\", \"u-verb\"]},\n                \"kanji-reading\": {name: \"Kanji Readings\", value: false, validWordTypes: [\"kanji\"]},\n                \"kanji-definition\": {name: \"Kanji Definitions\", value: false, validWordTypes: [\"kanji\"]},\n                \"kwtoe\": {name: \"Kanji Word English Definitions\", value: false, validWordTypes: [\"kanji-word\"]},\n                \"kwtoj\": {name: \"Kanji Word Readings\", value: false, validWordTypes: [\"kanji-word\"]},\n                \"adj-types\": {name: \"Adjective Types\", value: false, validWordTypes: [\"i-adjective\", \"na-adjective\"]},\n                \"adj-pres-conj\": {name: \"Present Tense Adjective Conjugation\", value: false, validWordTypes: [\"i-adjective\", \"na-adjective\"]},\n                \"adj-past-conj\": {name: \"Past Tense Adjective Conjugation\", value: false, validWordTypes: [\"i-adjective\", \"na-adjective\"]},\n                \"adj-te-conj\": {name: \"Te-form Adjective Conjugation\", value: false, validWordTypes: [\"i-adjective\", \"na-adjective\"]},\n                \"verb-pres-conj\": {name: \"Present Tense Verb Conjugation\", value: false, validWordTypes: [\"irregular-verb\", \"ru-verb\", \"u-verb\"]},\n                \"verb-past-conj\": {name: \"Past Tense Verb Conjugation\", value: false, validWordTypes: [\"irregular-verb\", \"ru-verb\", \"u-verb\"]},\n                \"verb-te-conj\": {name: \"Te-form Verb Conjugation\", value: false, validWordTypes: [\"irregular-verb\", \"ru-verb\", \"u-verb\"]}\n            },\n            words: {},\n            wordPool: {},\n            gamePool: {},\n            activeWord: {},\n            currentGame: 0,\n            totalGames: 0,\n            correctGames: 0,\n            results: {}\n        };\n        this.loadWords();\n    }\n\n    loadWords() {\n        fetch(\n            \"words.json\", \n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\"\n                }\n            }\n        ).then((response) => {\n            return response.json();\n        }).then((json) => {\n            const parsedWords = {};\n\n            json.forEach(element => {\n                populate(parsedWords, [element.edition, element.lesson, element.type, element.romaji], element);\n            });\n\n            const newState = Object.assign({}, this.state);\n            newState.words = parsedWords;\n            newState.display = \"menu\";\n            this.setState(newState);\n        });\n    };\n\n    buildWordPool(gamePool) {\n        const games = this.state.games;\n        const words = this.state.words;\n        const lessons = this.state.lessons;\n        let validWordTypes = [];\n        const wordPool = {};\n\n        Object.keys(lessons).forEach(lesson => {\n            if (lessons[lesson].value) {\n                Object.keys(words[EDITION][lesson]).forEach(type => {\n                    Object.values(words[EDITION][lesson][type]).forEach(word => {\n                        populate(wordPool, [word.type, word.romaji], word);\n                    });\n                });\n            }\n            \n        });\n\n        //get list of all word types that can be used for games in the game pool.\n        gamePool.forEach(game => {\n            validWordTypes = validWordTypes.concat(games[game].validWordTypes);\n        });\n\n        //remove duplicates.\n        validWordTypes.filter((type, index) => {\n            return (validWordTypes.indexOf(type) === index);\n        })\n\n        //remove word types that cannot be used in the game pool\n        Object.keys(wordPool).forEach(type => {\n            if (!validWordTypes.includes(type)) {\n                delete wordPool[type];\n            }\n        });\n\n        return wordPool;\n    }\n\n    buildGamePool() {\n        const games = this.state.games;\n        const gamePool = [];\n\n        Object.keys(games).forEach(game => {\n            if (games[game].value) {\n                gamePool.push(game);\n            } \n        });\n        \n        return gamePool;\n    }\n\n    optionsHandler(event) {\n        const newState = Object.assign({}, this.state);\n        newState[event.target.name][event.target.value].value = event.target.checked;\n        this.setState(newState);\n    }\n\n    startHandler() {\n        const gamePool = this.buildGamePool();\n        const wordPool = this.buildWordPool(gamePool);\n\n        if (Object.keys(gamePool).length === 0) {\n            alert(\"You haven't selected any games!\");\n            return;\n        } else if (Object.keys(wordPool).length === 0) {\n            alert(\"You haven't selected any lessons, or the lessons you selected do not have the types of words needed for the games you selected.\");\n            return;\n        }\n\n        let numGames = 0;\n\n        console.log(\"Word pool: \", wordPool); //DEBUG\n        console.log(\"Game pool: \", gamePool); //DEBUG\n\n        \n\n        Object.keys(wordPool).forEach(category => {\n            numGames += Object.keys(wordPool[category]).length;\n        });\n        \n        console.log(numGames);\n        \n        const newState = Object.assign({}, this.state);\n        newState.wordPool = wordPool;\n        newState.gamePool = gamePool;\n        newState.currentGame = 1;\n        newState.totalGames = numGames;\n        newState.correctGames = 0;\n        newState.results = {};\n        this.setState(newState, () => this.selectGame());\n    }\n\n    nextHandler(correct) {\n        const activeWordRomaji = this.state.activeWord.romaji;\n        const activeWordType = this.state.activeWord.type;\n        const currentGame = this.state.display;\n        const games = this.state.games;\n\n        const newState = Object.assign({}, this.state);\n        delete newState.wordPool[activeWordType][activeWordRomaji];\n        if (Object.keys(newState.wordPool[activeWordType]).length === 0) {\n            delete newState.wordPool[activeWordType];\n        }\n        newState.currentGame++;\n        \n        if (!newState.results[currentGame]) {\n            newState.results[currentGame] = {\n                name: games[currentGame].name,\n                correct: 0,\n                total: 0\n            }\n        }\n\n        newState.results[currentGame].total++;\n        if (correct) {\n            newState.correctGames++;\n            newState.results[currentGame].correct++;\n        }\n\n        this.setState(newState, () => {\n            const currentGame = this.state.currentGame;\n            const totalGames = this.state.totalGames;\n            if (currentGame <= totalGames) {\n                this.selectGame();\n            } else {\n                const newState = Object.assign({}, this.state);\n                newState.display = \"results\";\n                this.setState(newState);\n            }\n        });\n    }\n\n    resetHandler() {\n        const newState = Object.assign({}, this.state);\n        newState.display = \"menu\";\n        this.setState(newState);\n    }\n\n    selectGame() {\n        const wordPool = this.state.wordPool;\n        const gamePool = this.state.gamePool;\n        const wordType = Object.keys(wordPool)[getRandomInt(Object.keys(wordPool).length)];\n        const wordKey = Object.keys(wordPool[wordType])[getRandomInt(Object.keys(wordPool[wordType]).length)];\n        const word = wordPool[wordType][wordKey];\n        const selectedGame = this.findValidGame(gamePool, word);\n\n        console.log(\"Selected word: \", word); //DEBUG\n        console.log(\"Selected game: \", selectedGame); //DEBUG\n        \n        const newState = Object.assign({}, this.state);\n        newState.activeWord = word;\n        newState.display = selectedGame;\n        this.setState(newState);\n\n    }\n\n    findValidGame(gamePool, word) {\n        const games = this.state.games;\n        const validGames = [];\n        let selectedGame;\n\n        gamePool.forEach(game => {\n            if (games[game].validWordTypes.includes(word.type)) {\n                validGames.push(game);\n            }\n        });\n\n        selectedGame = validGames[getRandomInt(validGames.length)];\n\n        return selectedGame;\n    }\n\n    render() {\n        const display = this.state.display;\n        const word = this.state.activeWord;\n        const currentGame = this.state.currentGame;\n        const totalGames = this.state.totalGames;\n        let game;\n\n        if (display === \"menu\") {\n            return (\n                <div>\n                    <div id=\"main-view\">\n                        <MainMenu \n                        optionsHandler={(event) => this.optionsHandler(event)} \n                        startHandler={(event) => this.startHandler(event)}\n                        lessons={this.state.lessons} \n                        games={this.state.games} />\n                    </div>\n                </div>\n            );\n        } else if (display === \"loading\") {\n            return (\n                <div>\n                    <div id=\"main-view\" class=\"center-text\">\n                        <h1>Loading, please wait...</h1>\n                    </div>\n                </div>\n            );\n        } else if (display === \"results\") {\n                return (\n                    <div>\n                        <div id=\"main-view\">\n                            <ResultsMenu\n                                correct={this.state.correctGames}\n                                total={this.state.totalGames}\n                                results={this.state.results}\n                                resetHandler={() => this.resetHandler()}\n                            />\n                        </div>\n                    </div>\n                );\n        } else {\n            if (display === \"adj-types\") game = <AdjectiveTypeGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"etoj\") game = <EngToJapGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"jtoe\") game = <JapToEngGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"adj-pres-conj\") game = <AdjConjPresentGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"adj-past-conj\") game = <AdjContPastGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"adj-te-conj\") game = <AdjConjTeGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"verb-pres-conj\") game = <VerbConjPresentGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"verb-past-conj\") game = <VerbConjPastGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"verb-te-conj\") game = <VerbConjTeGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"kanji-reading\") game = <KanjiReadingGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"kanji-definition\") game = <KanjiDefinitionGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"kwtoe\") game = <KanjiWordToEngGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"kwtoj\") game = <KanjiWordToJapGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            \n            return (\n                <div>\n                    <div id=\"main-view\" class=\"center-text\">\n                        <div>{currentGame}/{totalGames}</div>\n                        {game}\n                    </div>\n                </div>\n            );\n        }\n    }\n    \n}\n\nReactDOM.render(\n    <div>\n        <MainView />\n        <div class=\"copyright center-text\">\n            <p>\n            Copyright © 2021 Noah Curoe. All Rights Reserved <br/>\n            The GENKI name is Copyright © The Japan Times Publishing, Ltd. \n            This site is in no way affiliated with \n            The Japan Times Publishing, Ltd. or any of its partners.\n            </p>\n        </div>\n    </div>,\n    document.getElementById('root')\n);"],"sourceRoot":""}