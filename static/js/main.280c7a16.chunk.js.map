{"version":3,"sources":["etoj-game.js","jtoe-game.js","adjective-type-game.js","conjugation-utils.js","adjective-conj-present-game.js","adjective-conj-past-game.js","adjective-conj-short-present-game.js","adjective-conj-te-game.js","verb-type-game.js","verb-conj-present-game.js","verb-conj-past-game.js","verb-conj-short-present-game.js","verb-conj-te-game.js","verb-root-game.js","kanji-reading-game.js","kanji-definition-game.js","kwtoe-game.js","kwtoj-game.js","options-component.js","index.js","utils.js"],"names":["EngToJapGame","props","word","question","english","kanaAnswer","hiragana","romajiAnswer","romaji","state","userAnswer","answered","correct","enterHandler","event","preventDefault","this","toLowerCase","replace","determineReasonableAnswers","concat","includes","setState","target","value","str","reasonableAnswers","push","code","nextHandler","handleEnter","document","addEventListener","removeEventListener","resultColor","resultAnswer","type","onClick","class","onSubmit","answerHandler","autoFocus","onChange","typeHandler","React","Component","JapToEngGame","answer","answers","split","forEach","ans","AdjectiveTypeGame","solution","match","newState","Object","assign","U_VERB_I_CONVERSION_TABLE","U_VERB_A_CONVERSION_TABLE","U_VERB_TE_CONVERSION_TABLE","VERB_TE_OVERRIDES","ADJ_LONG_PRES_NEG_OVERRIDES","ADJ_SHORT_PRES_NEG_OVERRIDES","ADJ_PAST_POS_OVERRIDES","ADJ_PAST_NEG_OVERRIDES","ADJ_TE_OVERRIDES","verbLongPresentPositive","result","length","verbLongPresentNegative","verbLongPastPositive","verbLongPastNegative","verbTe","AdjConjPresentGame","utils","conjugate","wanakana","AdjConjPastGame","AdjConjShortPresentGame","AdjConjTeGame","VerbTypeGame","VerbConjPresentGame","VerbConjPastGame","VerbConjShortPresentGame","VerbConjTeGame","VerbRootGame","conjugations","KanjiReadingGame","kanji","kanaReadings","romajiReadings","answerCombos","i","map","KanjiDefinitionGame","definitions","KanjiWordToEngGame","KanjiWordToJapGame","OptionsComponent","title","identifier","callback","options","dividedOptions","keys","key","col","Math","floor","elems","colItems","name","checked","MainMenu","optionsHandler","startHandler","lessons","games","ResultsMenu","resetHandler","total","results","resultsList","localCorrect","localTotal","localName","round","MainView","display","validWordTypes","words","wordPool","gamePool","activeWord","currentGame","totalGames","correctGames","loadWords","fetch","headers","then","response","json","parsedWords","element","edition","lesson","values","game","filter","index","indexOf","buildGamePool","buildWordPool","numGames","console","log","category","selectGame","alert","activeWordRomaji","activeWordType","wordType","wordKey","selectedGame","findValidGame","validGames","id","ReactDOM","render","getElementById","module","exports","getRandomInt","max","random","populate","obj","keyPath","lastKeyIndex"],"mappings":"sNAGqBA,E,kDACjB,WAAYC,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKE,QAChBC,EAAaH,EAAKI,SAClBC,EAAeL,EAAKM,OALX,OAOf,EAAKC,MAAQ,CACTN,SAAUA,EACVE,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAdH,E,iDAkBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,IAAK,IAEhEN,GAAU,EADYI,KAAKG,2BAA2Bd,GAAYe,OAAOJ,KAAKG,2BAA2BZ,IAGvFc,SAASX,KAC3BE,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,wCAG7C,SAA2BC,GACvB,IAAMC,EAAoB,GAqB1B,OAnBAD,EAAMA,EAAIR,cACVS,EAAkBC,KAAKF,GAEvBA,EAAMA,EAAIP,QAAQ,kPAAgB,IAClCQ,EAAkBC,KAAKF,GAIvBA,GADAA,GADAA,EAAMA,EAAIP,QAAQ,IAAK,KACbA,QAAQ,IAAK,KACbA,QAAQ,IAAK,IACvBQ,EAAkBC,KAAKF,GACvBC,EAAkBC,KAAKF,EAAIP,QAAQ,IAAK,KAExCQ,EAAkBC,KAAKF,EAAIP,QAAQ,kKAAsB,KAGzDO,GADAA,EAAMA,EAAIP,QAAQ,IAAK,KACbA,QAAQ,IAAK,IACvBQ,EAAkBC,KAAKF,GACvBC,EAAkBC,KAAKF,EAAIP,QAAQ,IAAK,KAEjCQ,I,yBAGX,SAAYZ,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBE,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,qEACA,8BACI,6BAAKnC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,qEACA,8BACI,6BAAKT,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GA1GToB,IAAMC,WCA3BC,E,kDACjB,WAAY7C,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKI,SAChByC,EAAS7C,EAAKE,QAJL,OAMf,EAAKK,MAAQ,CACTN,SAAUA,EACV4C,OAAQA,EACRrC,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAZH,E,iDAgBnB,SAAcC,GAAQ,IAAD,OACjBA,EAAMC,iBAEN,IAAMgC,EAAS/B,KAAKP,MAAMsC,OAAO9B,cAAcC,QAAQ,uFAAkB,IACnER,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,yFAAoB,IAC7E8B,EAAUD,EAAOE,MAAM,KACzBrC,GAAU,EACVc,EAAoB,GACxBA,EAAkBC,KAAKoB,GACvBC,EAAQE,SAAQ,SAAAC,GAGZzB,GADAA,GADAA,EAAoBA,EAAkBN,OAAO,EAAKD,2BAA2BgC,KACvC/B,OAAO,EAAKD,2BAA2BgC,EAAIjC,QAAQ,IAAK,QACxDE,OAAO,EAAKD,2BAA2BgC,EAAIjC,QAAQ,IAAK,SAG9FQ,EAAkBL,SAASX,KAC3BE,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,wCAG7C,SAA2BC,GACvB,IAAMC,EAAoB,GAiB1B,OAfAA,EAAkBC,KAAKF,GAEvBA,EAAMA,EAAIP,QAAQ,kPAAgB,IAClCQ,EAAkBC,KAAKF,GAEvBC,EAAkBC,KAAKF,GACvBC,EAAkBC,KAAKF,EAAIP,QAAQ,IAAK,KAExCQ,EAAkBC,KAAKF,EAAIP,QAAQ,kKAAsB,KAGzDO,GADAA,EAAMA,EAAIP,QAAQ,IAAK,KACbA,QAAQ,IAAK,IACvBQ,EAAkBC,KAAKF,GACvBC,EAAkBC,KAAKF,EAAIP,QAAQ,IAAK,KAEjCQ,I,yBAGX,SAAYZ,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtB4C,EAAS/B,KAAKP,MAAMsC,OACpBrC,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,8BAAMY,IACN,6BAAKZ,SAIbD,EAAc,MACdC,EAAe,qCAAuCY,EAAS,KAC/DZ,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,8EACA,8BACI,6BAAKnC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,8EACA,8BACI,6BAAKT,MAET,+FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GAzGToB,IAAMC,WCA3BO,E,kDACjB,WAAYnD,GAAQ,IAAD,sBAGf,IACIE,EACA4C,EACAM,EAHEnD,GAFN,cAAMD,IAEYA,MAAMC,KAHT,MAOG,iBAAdA,EAAKkC,MAELW,GADA5C,EAAWD,EAAKI,SAASgD,MAAM,sPAAoB,IAC/B,qBACpBD,EAAW,WAGXN,GADA5C,EAAWD,EAAKI,SAASgD,MAAM,gLAAe,IAC1B,qBACpBD,EAAW,UAGf,EAAK5C,MAAQ,CACTN,SAAUA,EACV4C,OAAQA,EACRM,SAAUA,EACV1C,UAAU,EACVC,SAAS,GAtBE,E,iDA0BnB,SAAcmC,GACV,IACInC,GAAU,EAEVmC,IAHa/B,KAAKP,MAAM4C,WAIxBzC,GAAU,GAGd,IAAM2C,EAAWC,OAAOC,OAAO,GAAIzC,KAAKP,OACxC8C,EAAS3C,QAAUA,EACnB2C,EAAS5C,UAAW,EACpBK,KAAKM,SAASiC,K,yBAGlB,SAAYzC,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtB4C,EAAS/B,KAAKP,MAAMsC,OACpBM,EAAWrC,KAAKP,MAAM4C,SACtB1C,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAcGC,GACAsB,EAAc,QACdC,EAAe,sBAAwBkB,EAAW,gBAElDnB,EAAc,MACdC,EAAe,wBAA0BkB,EAAW,eAIpD,sBAAKf,MAAM,qBAAX,UACI,iFACA,gCACI,6BAAI,sBAAMA,MAAOJ,EAAb,SAA2Ba,MAC/B,6BAAKZ,IACL,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1BR,gCACI,iFACA,8BACI,+BAAKT,EAAS,sBAAMmC,MAAM,MAAZ,qCAElB,sBAAKA,MAAM,cAAX,UACI,wBAAQA,MAAM,cAAcD,QAAS,kBAAM,EAAKG,cAAc,WAA9D,oBACA,wBAAQF,MAAM,cAAcD,QAAS,kBAAM,EAAKG,cAAc,WAA9D,8B,GAjFuBI,IAAMC,WCH/Ca,EAA4B,CAC9B,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,UAGHC,EAA4B,CAC9B,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,SACL,SAAK,UAGHC,EAA6B,CAC/B,SAAK,eACL,SAAK,eACL,SAAK,eACL,SAAK,eACL,SAAK,eACL,SAAK,eACL,SAAK,eACL,SAAK,eACL,SAAK,gBAGHC,EAAoB,CACtB,eAAM,sBAGJC,EAA8B,CAChC,eAAM,uCACN,iCAAS,yDACT,uCAAU,gEAGRC,EAA+B,CACjC,eAAM,2BACN,iCAAS,6CACT,uCAAU,oDAGRC,EAAyB,CAC3B,eAAM,uCACN,iCAAS,yDACT,uCAAU,gEAGRC,EAAyB,CAC3B,eAAM,mDACN,iCAAS,qEACT,uCAAU,4EAGRC,EAAmB,CACrB,eAAM,qBACN,iCAAS,uCACT,uCAAU,8CAGP,SAASC,EAAwBjE,GACpC,IAAIkE,EAASlE,EAAKI,SAYlB,MAVkB,YAAdJ,EAAKkC,KACLgC,EAASA,EAAOlD,QAAQ,YAAS,gBACZ,WAAdhB,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,oKAASwC,EAA0BU,EAAOA,EAAOC,OAAS,IAAM,gBACnE,mBAAdnE,EAAKkC,OAEZgC,GADAA,EAASA,EAAOlD,QAAQ,kBAAU,WAClBA,QAAQ,kBAAU,UAClCkD,GAAU,gBAGPA,EAGJ,SAASE,EAAwBpE,GACpC,IAAIkE,EAASlE,EAAKI,SAYlB,MAVkB,YAAdJ,EAAKkC,KACLgC,EAASA,EAAOlD,QAAQ,YAAS,sBACZ,WAAdhB,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,oKAASwC,EAA0BU,EAAOA,EAAOC,OAAS,IAAM,sBACnE,mBAAdnE,EAAKkC,OAEZgC,GADAA,EAASA,EAAOlD,QAAQ,kBAAU,WAClBA,QAAQ,kBAAU,UAClCkD,GAAU,sBAGPA,EAGJ,SAASG,EAAqBrE,GACjC,IAAIkE,EAASlE,EAAKI,SAYlB,MAVkB,YAAdJ,EAAKkC,KACLgC,EAASA,EAAOlD,QAAQ,YAAS,sBACZ,WAAdhB,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,oKAASwC,EAA0BU,EAAOA,EAAOC,OAAS,IAAM,wCACnE,mBAAdnE,EAAKkC,OAEZgC,GADAA,EAASA,EAAOlD,QAAQ,kBAAU,WAClBA,QAAQ,kBAAU,UAClCkD,GAAU,sBAGPA,EAGJ,SAASI,EAAqBtE,GACjC,IAAIkE,EAASlE,EAAKI,SAYlB,MAVkB,YAAdJ,EAAKkC,KACLgC,EAASA,EAAOlD,QAAQ,YAAS,wCACZ,WAAdhB,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,oKAASwC,EAA0BU,EAAOA,EAAOC,OAAS,IAAM,wCACnE,mBAAdnE,EAAKkC,OAEZgC,GADAA,EAASA,EAAOlD,QAAQ,kBAAU,WAClBA,QAAQ,kBAAU,UAClCkD,GAAU,wCAGPA,EA4BJ,SAASK,EAAOvE,GACnB,IAAIkE,EAASlE,EAAKI,SAalB,OAXIuD,EAAkBO,GAClBA,EAASP,EAAkBO,GACN,YAAdlE,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,YAAS,UACZ,WAAdhB,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,oKAAS0C,EAA2BQ,EAAOA,EAAOC,OAAS,KAC9D,mBAAdnE,EAAKkC,OAEZgC,GADAA,EAASA,EAAOlD,QAAQ,kBAAU,iBAClBA,QAAQ,kBAAU,iBAG/BkD,E,WC/KUM,E,kDACjB,WAAYzE,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKI,SAChB8B,EAAOuC,eAAmB,GAC1BtE,EAAuB,IAAT+B,ED4KrB,SAAgClC,GACnC,IAAIkE,EAASlE,EAAKI,SAQlB,MANkB,iBAAdJ,EAAKkC,KACLgC,EAASA,EAAOlD,QAAQ,kFAAc,gBACjB,gBAAdhB,EAAKkC,OACZgC,GAAkB,gBAGfA,ECpLCQ,CAAiC1E,GDuLtC,SAAgCA,GACnC,IAAIkE,EAASlE,EAAKI,SAUlB,OARIwD,EAA4BM,GAC5BA,EAASN,EAA4BM,GAChB,iBAAdlE,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,kFAAc,wCACjB,gBAAdhB,EAAKkC,OACZgC,EAASA,EAAOlD,QAAQ,YAAS,mCAG9BkD,ECjMCQ,CAAiC1E,GAC/BK,EAAesE,WAAkBxE,GARxB,OAUf,EAAKI,MAAQ,CACTN,SAAUA,EACViC,KAAgB,IAATA,EAAc,cAAgB,WACrC/B,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAlBH,E,iDAsBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,iFAAkB,IAC7EN,GAAU,EAEVF,IAAeL,GAAcK,IAAeH,IAC5CK,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,yBAG7C,SAAYV,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBiC,EAAOpB,KAAKP,MAAM2B,KAClB/B,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,iDAAmB,sBAAMA,MAAM,qBAAZ,uBAAnB,aAA8E,uBAAMA,MAAM,qBAAZ,+BAAoDF,KAAlI,cACA,8BACI,6BAAKjC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,iDAAmB,sBAAM0B,MAAM,qBAAZ,uBAAnB,aAA8E,uBAAMA,MAAM,qBAAZ,+BAAoDF,KAAlI,cACA,8BACI,6BAAKjC,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GArFHoB,IAAMC,WCAjCiC,E,kDACjB,WAAY7E,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKI,SAChB8B,EAAOuC,eAAmB,GAC1BtE,EAAuB,IAAT+B,EFuMrB,SAA6BlC,GAChC,IAAIkE,EAASlE,EAAKI,SAUlB,OARI0D,EAAuBI,GACvBA,EAASJ,EAAuBI,GACX,iBAAdlE,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,kFAAc,sBACjB,gBAAdhB,EAAKkC,OACZgC,EAASA,EAAOlD,QAAQ,YAAS,mCAG9BkD,EEjNCQ,CAA8B1E,GFoNnC,SAA6BA,GAChC,IAAIkE,EAASlE,EAAKI,SAUlB,OARI2D,EAAuBG,GACvBA,EAASH,EAAuBG,GACX,iBAAdlE,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,kFAAc,oDACjB,gBAAdhB,EAAKkC,OACZgC,EAASA,EAAOlD,QAAQ,YAAS,+CAG9BkD,EE9NCQ,CAA8B1E,GAC5BK,EAAesE,WAAkBxE,GARxB,OAUf,EAAKI,MAAQ,CACTN,SAAUA,EACViC,KAAgB,IAATA,EAAc,cAAgB,WACrC/B,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAlBH,E,iDAsBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,iFAAkB,IAC7EN,GAAU,EAEVF,IAAeL,GAAcK,IAAeH,IAC5CK,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,yBAG7C,SAAYV,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBiC,EAAOpB,KAAKP,MAAM2B,KAClB/B,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,iDAAmB,sBAAMA,MAAM,qBAAZ,uBAAnB,aAA8E,uBAAMA,MAAM,qBAAZ,4BAAiDF,KAA/H,cACA,8BACI,6BAAKjC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,iDAAmB,sBAAM0B,MAAM,qBAAZ,uBAAnB,aAA8E,uBAAMA,MAAM,qBAAZ,4BAAiDF,KAA/H,cACA,8BACI,6BAAKjC,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GArFNoB,IAAMC,WCA9BkC,E,kDACjB,WAAY9E,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKI,SAChB8B,EAAOuC,eAAmB,GAC1BtE,EAAuB,IAAT+B,EHmOrB,SAAiClC,GACpC,IAAIkE,EAASlE,EAAKI,SAMlB,MAJkB,iBAAdJ,EAAKkC,OACLgC,EAASA,EAAOlD,QAAQ,kFAAc,KAGnCkD,EGzOCQ,CAAkC1E,GH4OvC,SAAiCA,GACpC,IAAIkE,EAASlE,EAAKI,SAUlB,OARIyD,EAA6BK,GAC7BA,EAASL,EAA6BK,GACjB,iBAAdlE,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,kFAAc,4BACjB,gBAAdhB,EAAKkC,OACZgC,EAASA,EAAOlD,QAAQ,YAAS,uBAG9BkD,EGtPCQ,CAAkC1E,GAChCK,EAAesE,WAAkBxE,GARxB,OAUf,EAAKI,MAAQ,CACTN,SAAUA,EACViC,KAAgB,IAATA,EAAc,cAAgB,WACrC/B,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAlBH,E,iDAsBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,iFAAkB,IAC7EN,GAAU,EAEVF,IAAeL,GAAcK,IAAeH,IAC5CK,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,yBAG7C,SAAYV,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBiC,EAAOpB,KAAKP,MAAM2B,KAClB/B,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,iDAAmB,sBAAMA,MAAM,qBAAZ,uBAAnB,aAA8E,uBAAMA,MAAM,qBAAZ,gCAAqDF,KAAnI,cACA,8BACI,6BAAKjC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,iDAAmB,sBAAM0B,MAAM,qBAAZ,uBAAnB,aAA8E,uBAAMA,MAAM,qBAAZ,gCAAqDF,KAAnI,cACA,8BACI,6BAAKjC,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GArFEoB,IAAMC,WCDtCmC,E,kDACjB,WAAY/E,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKI,SAChBD,EJ8PP,SAAeH,GAClB,IAAIkE,EAASlE,EAAKI,SAUlB,OARI4D,EAAiBE,GACjBA,EAASF,EAAiBE,GACL,iBAAdlE,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,kFAAc,UACjB,gBAAdhB,EAAKkC,OACZgC,EAASA,EAAOlD,QAAQ,YAAS,iBAG9BkD,EIzQgBQ,CAAgB1E,GAC7BK,EAAesE,WAAkBxE,GALxB,OAOf,EAAKI,MAAQ,CACTN,SAAUA,EACVE,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAdH,E,iDAkBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,iFAAkB,IAC7EN,GAAU,EAEVF,IAAeL,GAAcK,IAAeH,IAC5CK,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,yBAG7C,SAAYV,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBE,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,iDAAmB,sBAAMA,MAAM,qBAAZ,uBAAnB,aAA8E,sBAAMA,MAAM,qBAAZ,qBAA9E,cACA,8BACI,6BAAKnC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,iDAAmB,sBAAM0B,MAAM,qBAAZ,uBAAnB,aAA8E,sBAAMA,MAAM,qBAAZ,qBAA9E,cACA,8BACI,6BAAKnC,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GAhFRoB,IAAMC,WCF5BoC,E,kDACjB,WAAYhF,GAAQ,IAAD,sBAGf,IAEIoD,EAFEnD,GAFN,cAAMD,IAEYA,MAAMC,KAClBC,EAAWD,EAAKI,SAJP,OAOa+C,EAAV,WAAdnD,EAAKkC,KAA8B,IAChB,YAAdlC,EAAKkC,KAA+B,SAC7B,OAEhB,EAAK3B,MAAQ,CACTN,SAAUA,EACVkD,SAAUA,EACV1C,UAAU,EACVC,SAAS,GAfE,E,iDAmBnB,SAAcmC,GACV,IACInC,GAAU,EAEVmC,IAHa/B,KAAKP,MAAM4C,WAIxBzC,GAAU,GAGd,IAAM2C,EAAWC,OAAOC,OAAO,GAAIzC,KAAKP,OACxC8C,EAAS3C,QAAUA,EACnB2C,EAAS5C,UAAW,EACpBK,KAAKM,SAASiC,K,yBAGlB,SAAYzC,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBkD,EAAWrC,KAAKP,MAAM4C,SACtB1C,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,sBAAwBkB,EAAW,WAElDnB,EAAc,MACdC,EAAe,wBAA0BkB,EAAW,UAIpD,sBAAKf,MAAM,qBAAX,UACI,iFACA,gCACI,6BAAI,sBAAMA,MAAOJ,EAAb,SAA2B/B,MAC/B,6BAAKgC,IACL,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA3BR,gCACI,iFACA,8BACI,6BAAKT,MAET,sBAAKmC,MAAM,cAAX,UACI,wBAAQA,MAAM,cAAcD,QAAS,kBAAM,EAAKG,cAAc,MAA9D,eACA,wBAAQF,MAAM,cAAcD,QAAS,kBAAM,EAAKG,cAAc,WAA9D,oBACA,wBAAQF,MAAM,cAAcD,QAAS,kBAAM,EAAKG,cAAc,SAA9D,4B,GA1EkBI,IAAMC,WCG3BqC,E,kDACjB,WAAYjF,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKI,SAChB8B,EAAOuC,eAAmB,GAC1BtE,EAAuB,IAAT+B,EAChBwC,EAAkC1E,GAClC0E,EAAkC1E,GAChCK,EAAesE,WAAkBxE,GARxB,OAUf,EAAKI,MAAQ,CACTN,SAAUA,EACViC,KAAgB,IAATA,EAAc,cAAgB,WACrC/B,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAlBH,E,iDAsBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,iFAAkB,IAC7EN,GAAU,EAEVF,IAAeL,GAAcK,IAAeH,IAC5CK,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,yBAG7C,SAAYV,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBiC,EAAOpB,KAAKP,MAAM2B,KAClB/B,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,iDAAmB,sBAAMA,MAAM,qBAAZ,kBAAnB,aAAyE,uBAAMA,MAAM,qBAAZ,+BAAoDF,KAA7H,cACA,8BACI,6BAAKjC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,iDAAmB,sBAAM0B,MAAM,qBAAZ,kBAAnB,aAAyE,uBAAMA,MAAM,qBAAZ,+BAAoDF,KAA7H,cACA,8BACI,6BAAKjC,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GArFFoB,IAAMC,WCAlCsC,E,kDACjB,WAAYlF,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKI,SAChB8B,EAAOuC,eAAmB,GAC1BtE,EAAuB,IAAT+B,EAChBwC,EAA+B1E,GAC/B0E,EAA+B1E,GAC7BK,EAAesE,WAAkBxE,GARxB,OAUf,EAAKI,MAAQ,CACTN,SAAUA,EACViC,KAAgB,IAATA,EAAc,cAAgB,WACrC/B,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAlBH,E,iDAsBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,iFAAkB,IAC7EN,GAAU,EAEVF,IAAeL,GAAcK,IAAeH,IAC5CK,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,yBAG7C,SAAYV,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBiC,EAAOpB,KAAKP,MAAM2B,KAClB/B,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,iDAAmB,sBAAMA,MAAM,qBAAZ,kBAAnB,aAAyE,uBAAMA,MAAM,qBAAZ,4BAAiDF,KAA1H,cACA,8BACI,6BAAKjC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,iDAAmB,sBAAM0B,MAAM,qBAAZ,kBAAnB,aAAyE,uBAAMA,MAAM,qBAAZ,4BAAiDF,KAA1H,cACA,8BACI,6BAAKjC,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GArFLoB,IAAMC,WCA/BuC,E,kDACjB,WAAYnF,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKI,SAChB8B,EAAOuC,eAAmB,GAC1BtE,EAAuB,IAAT+B,ERkIrB,SAAkClC,GAKrC,OAJaA,EAAKI,SQlIVsE,CAAmC1E,GRyIxC,SAAkCA,GACrC,IAAIkE,EAASlE,EAAKI,SAalB,MAXe,iBAAX8D,EACAA,EAAS,eACY,YAAdlE,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,YAAS,gBACZ,WAAdhB,EAAKkC,KACZgC,EAASA,EAAOlD,QAAQ,oKAASyC,EAA0BS,EAAOA,EAAOC,OAAS,IAAM,gBACnE,mBAAdnE,EAAKkC,OAEZgC,GADAA,EAASA,EAAOlD,QAAQ,kBAAU,uBAClBA,QAAQ,kBAAU,uBAG/BkD,EQtJCQ,CAAmC1E,GACjCK,EAAesE,WAAkBxE,GARxB,OAUf,EAAKI,MAAQ,CACTN,SAAUA,EACViC,KAAgB,IAATA,EAAc,cAAgB,WACrC/B,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAlBH,E,iDAsBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,iFAAkB,IAC7EN,GAAU,EAEVF,IAAeL,GAAcK,IAAeH,IAC5CK,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,yBAG7C,SAAYV,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBiC,EAAOpB,KAAKP,MAAM2B,KAClB/B,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,iDAAmB,sBAAMA,MAAM,qBAAZ,kBAAnB,aAAyE,uBAAMA,MAAM,qBAAZ,gCAAqDF,KAA9H,cACA,8BACI,6BAAKjC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,iDAAmB,sBAAM0B,MAAM,qBAAZ,kBAAnB,aAAyE,uBAAMA,MAAM,qBAAZ,gCAAqDF,KAA9H,cACA,8BACI,6BAAKjC,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GArFGoB,IAAMC,WCDvCwC,E,kDACjB,WAAYpF,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKI,SAChBD,EAAauE,EAAiB1E,GAC9BK,EAAesE,WAAkBxE,GALxB,OAOf,EAAKI,MAAQ,CACTN,SAAUA,EACVE,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAdH,E,iDAkBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,iFAAkB,IAC7EN,GAAU,EAEVF,IAAeL,GAAcK,IAAeH,IAC5CK,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,yBAG7C,SAAYV,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBE,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,iDAAmB,sBAAMA,MAAM,qBAAZ,kBAAnB,aAAyE,sBAAMA,MAAM,qBAAZ,qBAAzE,cACA,8BACI,6BAAKnC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,iDAAmB,sBAAM0B,MAAM,qBAAZ,kBAAnB,aAAyE,sBAAMA,MAAM,qBAAZ,qBAAzE,cACA,8BACI,6BAAKnC,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GAhFPoB,IAAMC,WCA7ByC,E,kDACjB,WAAYrF,GAAQ,IAAD,sBAEf,IAAMsF,EAAe,CACjBX,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEE1E,GAVN,cAAMD,IAUYA,MAAMC,KAElBC,EAAWoF,EADJZ,eAAmB,IACIzE,GAC9BG,EAAaH,EAAKI,SAClBC,EAAeL,EAAKM,OAfX,OAiBf,EAAKC,MAAQ,CACTN,SAAUA,EACVE,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAxBH,E,iDA4BnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,IAAK,IAEhEN,GAAU,EADYI,KAAKG,2BAA2Bd,GAAYe,OAAOJ,KAAKG,2BAA2BZ,IAGvFc,SAASX,KAC3BE,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,wCAG7C,SAA2BC,GACvB,IAAMC,EAAoB,GAqB1B,OAnBAD,EAAMA,EAAIR,cACVS,EAAkBC,KAAKF,GAEvBA,EAAMA,EAAIP,QAAQ,kPAAgB,IAClCQ,EAAkBC,KAAKF,GAIvBA,GADAA,GADAA,EAAMA,EAAIP,QAAQ,IAAK,KACbA,QAAQ,IAAK,KACbA,QAAQ,IAAK,IACvBQ,EAAkBC,KAAKF,GACvBC,EAAkBC,KAAKF,EAAIP,QAAQ,IAAK,KAExCQ,EAAkBC,KAAKF,EAAIP,QAAQ,kKAAsB,KAGzDO,GADAA,EAAMA,EAAIP,QAAQ,IAAK,KACbA,QAAQ,IAAK,IACvBQ,EAAkBC,KAAKF,GACvBC,EAAkBC,KAAKF,EAAIP,QAAQ,IAAK,KAEjCQ,I,yBAGX,SAAYZ,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBE,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,4EACA,8BACI,6BAAKnC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,4EACA,8BACI,6BAAKT,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GApHToB,IAAMC,WCF3B2C,E,kDACjB,WAAYvF,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKuF,MAChBC,EAAexF,EAAKI,SACpBqF,EAAiBzF,EAAKM,OALb,OAOf,EAAKC,MAAQ,CACTN,SAAUA,EACVuF,aAAcA,EACdC,eAAgBA,EAChBjF,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAdH,E,iDAkBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAM2E,EAAe1E,KAAKP,MAAMiF,aAC1BC,EAAiB3E,KAAKP,MAAMkF,eAC5BjF,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,IAAK,IAEhEN,GAAU,EADY8E,EAAazC,MAAM,KAAK7B,OAAOuE,EAAe1E,cAAcgC,MAAM,MAGtE5B,SAASX,KAC3BE,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,yBAG7C,SAAYV,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAWI,IAXM,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBuF,EAAe1E,KAAKP,MAAMiF,aAAazC,MAAM,KAC7C0C,EAAiB3E,KAAKP,MAAMkF,eAAe1C,MAAM,KACjDvC,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GACfyD,EAAe,GAEVC,EAAI,EAAGA,EAAIH,EAAarB,OAAQwB,IACrCD,EAAajE,KAAK+D,EAAaG,GAAK,MAAQF,EAAeE,IAS/D,OANAD,EAAeA,EAAaE,KAAI,SAAA/C,GAC5B,OACI,sBAAMT,MAAM,kBAAZ,SAA+BS,OAIlCpC,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACKyD,EACD,6BAAKzD,SAIbD,EAAc,MACdC,EAAe,aACfA,EACI,gCACKyD,EACD,6BAAKzD,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,+CAAiB,sBAAMA,MAAM,qBAAZ,qBAAjB,+BACA,8BACI,6BAAKnC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA3CR,gCACI,+CAAiB,sBAAM0B,MAAM,qBAAZ,qBAAjB,+BACA,8BACI,6BAAKnC,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GA5FLoB,IAAMC,WCA/BkD,E,kDACjB,WAAY9F,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKuF,MAChBO,EAAc9F,EAAKE,QAJV,OAMf,EAAKK,MAAQ,CACTN,SAAUA,EACV6F,YAAaA,EACbtF,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAZH,E,iDAgBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMiF,EAAchF,KAAKP,MAAMuF,YAAY/E,cAAcC,QAAQ,iFAAiB,IAC5ER,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,iFAAiB,IAE5EN,GAAU,EADYoF,EAAY/C,MAAM,KAGtB5B,SAASX,KAC3BE,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,yBAG7C,SAAYV,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAUI,IAVM,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtB6F,EAAchF,KAAKP,MAAMuF,YAAY/C,MAAM,KAC3CvC,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GACfyD,EAAe,GAEVC,EAAI,EAAGA,EAAIG,EAAY3B,OAAQwB,IACpCD,EAAajE,KAAKqE,EAAYH,IASlC,OANAD,EAAeA,EAAaE,KAAI,SAAA/C,GAC5B,OACI,sBAAMT,MAAM,kBAAZ,SAA+BS,OAIlCpC,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACKyD,EACD,6BAAKzD,SAIbD,EAAc,MACdC,EAAe,aACfA,EACI,gCACKyD,EACD,6BAAKzD,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,+CAAiB,sBAAMA,MAAM,qBAAZ,gCAAjB,+BACA,8BACI,6BAAKnC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA3CR,gCACI,+CAAiB,sBAAM0B,MAAM,qBAAZ,gCAAjB,+BACA,8BACI,6BAAKnC,MAET,+FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GAxFFoB,IAAMC,WCAlCoD,E,kDACjB,WAAYhG,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKuF,MAChB1C,EAAS7C,EAAKE,QAJL,OAMf,EAAKK,MAAQ,CACTN,SAAUA,EACV4C,OAAQA,EACRrC,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAZH,E,iDAgBnB,SAAcC,GAAQ,IAAD,OACjBA,EAAMC,iBAEN,IAAMgC,EAAS/B,KAAKP,MAAMsC,OAAO9B,cAAcC,QAAQ,uFAAkB,IACnER,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,yFAAoB,IAC7E8B,EAAUD,EAAOE,MAAM,KACzBrC,GAAU,EACVc,EAAoB,GACxBA,EAAkBC,KAAKoB,GACvBC,EAAQE,SAAQ,SAAAC,GAGZzB,GADAA,GADAA,EAAoBA,EAAkBN,OAAO,EAAKD,2BAA2BgC,KACvC/B,OAAO,EAAKD,2BAA2BgC,EAAIjC,QAAQ,IAAK,QACxDE,OAAO,EAAKD,2BAA2BgC,EAAIjC,QAAQ,IAAK,SAG9FQ,EAAkBL,SAASX,KAC3BE,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,wCAG7C,SAA2BC,GACvB,IAAMC,EAAoB,GAiB1B,OAfAA,EAAkBC,KAAKF,GAEvBA,EAAMA,EAAIP,QAAQ,kPAAgB,IAClCQ,EAAkBC,KAAKF,GAEvBC,EAAkBC,KAAKF,GACvBC,EAAkBC,KAAKF,EAAIP,QAAQ,IAAK,KAExCQ,EAAkBC,KAAKF,EAAIP,QAAQ,kKAAsB,KAGzDO,GADAA,EAAMA,EAAIP,QAAQ,IAAK,KACbA,QAAQ,IAAK,IACvBQ,EAAkBC,KAAKF,GACvBC,EAAkBC,KAAKF,EAAIP,QAAQ,IAAK,KAEjCQ,I,yBAGX,SAAYZ,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtB4C,EAAS/B,KAAKP,MAAMsC,OACpBrC,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,8BAAMY,IACN,6BAAKZ,SAIbD,EAAc,MACdC,EAAe,qCAAuCY,EAAS,KAC/DZ,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,+FACA,8BACI,6BAAKnC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,+FACA,8BACI,6BAAKT,MAET,+FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GAzGHoB,IAAMC,WCAjCqD,E,kDACjB,WAAYjG,GAAQ,IAAD,sBAEf,IAAMC,GADN,cAAMD,IACYA,MAAMC,KAClBC,EAAWD,EAAKuF,MAChBpF,EAAaH,EAAKI,SAClBC,EAAeL,EAAKM,OALX,OAOf,EAAKC,MAAQ,CACTN,SAAUA,EACVE,WAAYA,EACZE,aAAcA,EACdG,WAAY,GACZC,UAAU,EACVC,SAAS,EACTC,aAAc,IAdH,E,iDAkBnB,SAAcC,GACVA,EAAMC,iBAEN,IAAMV,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WAAWO,cAAcC,QAAQ,IAAK,IAEhEN,GAAU,EADYI,KAAKG,2BAA2Bd,GAAYe,OAAOJ,KAAKG,2BAA2BZ,IAGvFc,SAASX,KAC3BE,GAAU,GAGdI,KAAKM,SAAS,CAACX,UAAU,EAAMC,QAASA,M,yBAG5C,SAAYE,GACRE,KAAKM,SAAS,CAAEZ,WAAYI,EAAMS,OAAOC,U,wCAG7C,SAA2BC,GACvB,IAAMC,EAAoB,GAqB1B,OAnBAD,EAAMA,EAAIR,cACVS,EAAkBC,KAAKF,GAEvBA,EAAMA,EAAIP,QAAQ,kPAAgB,IAClCQ,EAAkBC,KAAKF,GAIvBA,GADAA,GADAA,EAAMA,EAAIP,QAAQ,IAAK,KACbA,QAAQ,IAAK,KACbA,QAAQ,IAAK,IACvBQ,EAAkBC,KAAKF,GACvBC,EAAkBC,KAAKF,EAAIP,QAAQ,IAAK,KAExCQ,EAAkBC,KAAKF,EAAIP,QAAQ,kKAAsB,KAGzDO,GADAA,EAAMA,EAAIP,QAAQ,IAAK,KACbA,QAAQ,IAAK,IACvBQ,EAAkBC,KAAKF,GACvBC,EAAkBC,KAAKF,EAAIP,QAAQ,IAAK,KAEjCQ,I,yBAGX,SAAYZ,GACR,GAAmB,UAAfA,EAAMc,MAAmC,gBAAfd,EAAMc,KAAwB,CACxD,IAAMjB,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBD,IACAG,EAAMC,iBACNC,KAAKf,MAAM4B,YAAYjB,O,+BAKnC,WAAoB,IAAD,OACTC,EAAe,SAACC,GAAD,OAAW,EAAKgB,YAAYhB,IACjDE,KAAKM,SAAS,CAACT,aAAcA,IAC7BkB,SAASC,iBAAiB,UAAWnB,GAAc,K,kCAGvD,WACI,IAAMA,EAAeG,KAAKP,MAAMI,aAChCkB,SAASE,oBAAoB,UAAWpB,GAAc,K,oBAG1D,WAAU,IAAD,OACCV,EAAWa,KAAKP,MAAMN,SACtBE,EAAaW,KAAKP,MAAMJ,WACxBE,EAAeS,KAAKP,MAAMF,aAC1BG,EAAaM,KAAKP,MAAMC,WACxBC,EAAWK,KAAKP,MAAME,SACtBC,EAAUI,KAAKP,MAAMG,QACvBsB,EAAc,GACdC,EAAe,GAEnB,OAAKxB,GAeGC,GACAsB,EAAc,QACdC,EAAe,WACfA,EACI,gCACI,gCAAM9B,EAAN,MAAqBE,KACrB,6BAAK4B,SAIbD,EAAc,MACdC,EAAe,oCAAsC9B,EAAa,KAAOE,EAAe,IACxF4B,EACI,gCACI,6BAAKA,IACL,wBAAQC,KAAK,SAASC,QAAS,WAAO,EAAKf,SAAS,CAACV,SAAS,KAA9D,yCAMR,sBAAK0B,MAAM,qBAAX,UACI,gGACA,8BACI,6BAAKnC,MAET,gCACI,6BAAI,sBAAMmC,MAAOJ,EAAb,SAA2BxB,MAC9ByB,EACD,wBAAQG,MAAM,oBAAoBD,QAAS,kBAAM,EAAKpC,MAAM4B,YAAYjB,IAAxE,yBA1CR,gCACI,gGACA,8BACI,6BAAKT,MAET,6FACA,uBAAMoC,SAAU,SAACzB,GAAD,OAAW,EAAK0B,cAAc1B,IAA9C,UACI,uBAAO2B,WAAS,EAACL,KAAK,OAAOZ,MAAOd,EAAYgC,SAAU,SAAC5B,GAAD,OAAW,EAAK6B,YAAY7B,MACtF,uBAAOsB,KAAK,SAASZ,MAAM,qB,GA1GHoB,IAAMC,WCCjCsD,E,4JAEjB,WACI,IAAMC,EAAQpF,KAAKf,MAAMmG,MACnBC,EAAarF,KAAKf,MAAMoG,WACxBjE,EAAOpB,KAAKf,MAAMmC,KAClBkE,EAAWtF,KAAKf,MAAMqG,SACtBC,EAAUvF,KAAKf,MAAMsG,QACrBC,EAAiB,GAEnBX,EAAI,EACRrC,OAAOiD,KAAKF,GAASrD,SAAQ,SAAAwD,GACzB,IAAMC,EAAMC,KAAKC,MAAMhB,EAbf,IAcHW,EAAeG,KAAMH,EAAeG,GAAO,IAChDH,EAAeG,GAAKD,GAAOH,EAAQG,GACnCb,OAGJ,IAAMiB,EAAQN,EAAeV,KAAI,SAAAiB,GAC7B,IAAMJ,EAAMnD,OAAOiD,KAAKM,GAAUjB,KAAI,SAAAY,GAClC,OACI,wBAAiBpE,MAAM,eAAvB,UACA,uBAAOF,KAAMA,EAAMZ,MAAOkF,EAAKM,KAAMX,EAAYY,QAASF,EAASL,GAAKlF,MAAOkB,SAAU4D,IACxFS,EAASL,GAAKM,OAFHN,MAOpB,OACK,qBAAKpE,MAAM,iBAAX,SACKqE,OAcd,OACI,qBAAKrE,MAAM,oBAAX,SACI,gCACI,sBAAMA,MAAM,OAAZ,SAAoB8D,IACpB,8BACKU,a,GAjDqBlE,IAAMC,WCqB9CqE,E,4JAEF,WACI,IAAMC,EAAiBnG,KAAKf,MAAMkH,eAC5BC,EAAepG,KAAKf,MAAMmH,aAC1BC,EAAUrG,KAAKf,MAAMoH,QACrBC,EAAQtG,KAAKf,MAAMqH,MAEzB,OACI,sBAAKhF,MAAM,YAAX,UACI,sBAAKA,MAAM,cAAX,UACI,iDACA,mGAEJ,uBACA,sBAAKA,MAAM,UAAX,UACI,cAAC,EAAD,CACI8D,MAAM,iBACNC,WAAW,UACXE,QAAWc,EACXjF,KAAK,WACLkE,SAAUa,IAEd,cAAC,EAAD,CACIf,MAAM,eACNC,WAAW,QACXE,QAAWe,EACXlF,KAAK,WACLkE,SAAUa,OAElB,qBAAK7E,MAAM,cAAX,SACI,wBAAQA,MAAM,oBAAoBD,QAAS+E,EAA3C,4B,GA/BGxE,IAAMC,WAsCvB0E,E,4JAEF,WACI,IAAMC,EAAexG,KAAKf,MAAMuH,aAC1B5G,EAAUI,KAAKf,MAAMW,QACrB6G,EAAQzG,KAAKf,MAAMwH,MACnBC,EAAU1G,KAAKf,MAAMyH,QACrBC,EAAcnE,OAAOiD,KAAKiB,GAAS5B,KAAI,SAACY,GAC1C,IAAMkB,EAAeF,EAAQhB,GAAK9F,QAC5BiH,EAAaH,EAAQhB,GAAKe,MAC1BK,EAAYJ,EAAQhB,GAAKM,KAC/B,OACI,sBAAqB1E,MAAM,cAA3B,UACKwF,EADL,KACkBF,EADlB,IACiCC,EADjC,KAC+CjB,KAAKmB,MAAmB,IAAbH,EAAkBC,GAAY,GADxF,OAAUC,MAKlB,OACI,sBAAKxF,MAAM,cAAX,UACI,yCACA,yCAAY1B,EAAZ,IAAsB6G,EAAtB,KAA+Bb,KAAKmB,MAAc,IAARnH,EAAa6G,GAAO,GAA9D,QACA,qBAAKnF,MAAM,mBAAX,SACKqF,IAEL,wBAAQrF,MAAM,oBAAoBD,QAASmF,EAA3C,mC,GAxBU5E,IAAMC,WA8B1BmF,E,kDACF,WAAY/H,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CACTwH,QAAS,UACTZ,QAAS,CACL,EAAK,CAACL,KAAM,YAAaxF,OAAO,GAChC,GAAM,CAACwF,KAAM,WAAYxF,OAAO,GAChC,GAAM,CAACwF,KAAM,WAAYxF,OAAO,GAChC,GAAM,CAACwF,KAAM,WAAYxF,OAAO,GAChC,GAAM,CAACwF,KAAM,WAAYxF,OAAO,GAChC,GAAM,CAACwF,KAAM,WAAYxF,OAAO,GAChC,GAAM,CAACwF,KAAM,WAAYxF,OAAO,GAChC,GAAM,CAACwF,KAAM,WAAYxF,OAAO,GAChC,GAAM,CAACwF,KAAM,WAAYxF,OAAO,GAChC,GAAM,CAACwF,KAAM,WAAYxF,OAAO,IAEpC8F,MAAO,CACH,KAAQ,CAACN,KAAM,6BAA8BxF,OAAO,EAAO0G,eAAgB,CAAC,SAAU,aAAc,cAAe,iBAAkB,eAAgB,OAAQ,WAAY,SAAU,UAAW,SAAU,WACxM,KAAQ,CAAClB,KAAM,6BAA8BxF,OAAO,EAAO0G,eAAgB,CAAC,SAAU,aAAc,cAAe,iBAAkB,eAAgB,OAAQ,WAAY,SAAU,UAAW,SAAU,WACxM,gBAAiB,CAAClB,KAAM,iBAAkBxF,OAAO,EAAO0G,eAAgB,CAAC,UACzE,mBAAoB,CAAClB,KAAM,oBAAqBxF,OAAO,EAAO0G,eAAgB,CAAC,UAC/E,MAAS,CAAClB,KAAM,iCAAkCxF,OAAO,EAAO0G,eAAgB,CAAC,eACjF,MAAS,CAAClB,KAAM,sBAAuBxF,OAAO,EAAO0G,eAAgB,CAAC,eACtE,YAAa,CAAClB,KAAM,kBAAmBxF,OAAO,EAAO0G,eAAgB,CAAC,cAAe,iBACrF,gBAAiB,CAAClB,KAAM,qCAAsCxF,OAAO,EAAO0G,eAAgB,CAAC,cAAe,iBAC5G,gBAAiB,CAAClB,KAAM,kCAAmCxF,OAAO,EAAO0G,eAAgB,CAAC,cAAe,iBACzG,sBAAuB,CAAClB,KAAM,sCAAuCxF,OAAO,EAAO0G,eAAgB,CAAC,cAAe,iBAEnH,cAAe,CAAClB,KAAM,gCAAiCxF,OAAO,EAAO0G,eAAgB,CAAC,cAAe,iBACrG,aAAc,CAAClB,KAAM,aAAcxF,OAAO,EAAO0G,eAAgB,CAAC,iBAAkB,UAAW,WAC/F,iBAAkB,CAAClB,KAAM,qCAAsCxF,OAAO,EAAO0G,eAAgB,CAAC,iBAAkB,UAAW,WAC3H,iBAAkB,CAAClB,KAAM,kCAAmCxF,OAAO,EAAO0G,eAAgB,CAAC,iBAAkB,UAAW,WACxH,uBAAwB,CAAClB,KAAM,sCAAuCxF,OAAO,EAAO0G,eAAgB,CAAC,iBAAkB,UAAW,WAElI,eAAgB,CAAClB,KAAM,2BAA4BxF,OAAO,EAAO0G,eAAgB,CAAC,iBAAkB,UAAW,WAC/G,YAAa,CAAClB,KAAM,mCAAoCxF,OAAO,EAAO0G,eAAgB,CAAC,iBAAkB,UAAW,YAExHC,MAAO,GACPC,SAAU,GACVC,SAAU,GACVC,WAAY,GACZC,YAAa,EACbC,WAAY,EACZC,aAAc,EACdf,QAAS,IAEb,EAAKgB,YA9CU,E,6CAiDnB,WAAa,IAAD,OACRC,MACI,aACA,CACIC,QAAS,CACL,eAAgB,mBAChB,OAAU,sBAGpBC,MAAK,SAACC,GACJ,OAAOA,EAASC,UACjBF,MAAK,SAACE,GACL,IAAMC,EAAc,GAEpBD,EAAK7F,SAAQ,SAAA+F,GACTtE,WAAeqE,EAAa,CAACC,EAAQC,QAASD,EAAQE,OAAQF,EAAQ7G,KAAM6G,EAAQzI,QAASyI,MAGjG,IAAM1F,EAAWC,OAAOC,OAAO,GAAI,EAAKhD,OACxC8C,EAAS4E,MAAQa,EACjBzF,EAAS0E,QAAU,OACnB,EAAK3G,SAASiC,Q,2BAItB,SAAc8E,GACV,IAAMf,EAAQtG,KAAKP,MAAM6G,MACnBa,EAAQnH,KAAKP,MAAM0H,MACnBd,EAAUrG,KAAKP,MAAM4G,QACvBa,EAAiB,GACfE,EAAW,GA8BjB,OA5BA5E,OAAOiD,KAAKY,GAASnE,SAAQ,SAAAiG,GACrB9B,EAAQ8B,GAAQ3H,OAChBgC,OAAOiD,KAAK0B,EA1JZ,GA0J2BgB,IAASjG,SAAQ,SAAAd,GACxCoB,OAAO4F,OAAOjB,EA3JlB,GA2JiCgB,GAAQ/G,IAAOc,SAAQ,SAAAhD,GAChDyE,WAAeyD,EAAU,CAAClI,EAAKkC,KAAMlC,EAAKM,QAASN,YAQnEmI,EAASnF,SAAQ,SAAAmG,GACbnB,EAAiBA,EAAe9G,OAAOkG,EAAM+B,GAAMnB,mBAIvDA,EAAeoB,QAAO,SAAClH,EAAMmH,GACzB,OAAQrB,EAAesB,QAAQpH,KAAUmH,KAI7C/F,OAAOiD,KAAK2B,GAAUlF,SAAQ,SAAAd,GACrB8F,EAAe7G,SAASe,WAClBgG,EAAShG,MAIjBgG,I,2BAGX,WACI,IAAMd,EAAQtG,KAAKP,MAAM6G,MACnBe,EAAW,GAQjB,OANA7E,OAAOiD,KAAKa,GAAOpE,SAAQ,SAAAmG,GACnB/B,EAAM+B,GAAM7H,OACZ6G,EAAS1G,KAAK0H,MAIfhB,I,4BAGX,SAAevH,GACX,IAAMyC,EAAWC,OAAOC,OAAO,GAAIzC,KAAKP,OACxC8C,EAASzC,EAAMS,OAAOyF,MAAMlG,EAAMS,OAAOC,OAAOA,MAAQV,EAAMS,OAAO0F,QACrEjG,KAAKM,SAASiC,K,0BAGlB,WAAgB,IAAD,OACL8E,EAAWrH,KAAKyI,gBAChBrB,EAAWpH,KAAK0I,cAAcrB,GAEpC,GAAqC,IAAjC7E,OAAOiD,KAAK4B,GAAUhE,OAGnB,GAAqC,IAAjCb,OAAOiD,KAAK2B,GAAU/D,OAA1B,CAKP,IAAIsF,EAAW,EAEfC,QAAQC,IAAI,cAAezB,GAC3BwB,QAAQC,IAAI,cAAexB,GAI3B7E,OAAOiD,KAAK2B,GAAUlF,SAAQ,SAAA4G,GAC1BH,GAAYnG,OAAOiD,KAAK2B,EAAS0B,IAAWzF,UAGhDuF,QAAQC,IAAIF,GAEZ,IAAMpG,EAAWC,OAAOC,OAAO,GAAIzC,KAAKP,OACxC8C,EAAS6E,SAAWA,EACpB7E,EAAS8E,SAAWA,EACpB9E,EAASgF,YAAc,EACvBhF,EAASiF,WAAamB,EACtBpG,EAASkF,aAAe,EACxBlF,EAASmE,QAAU,GACnB1G,KAAKM,SAASiC,GAAU,kBAAM,EAAKwG,qBAxB/BC,MAAM,wIAHNA,MAAM,qC,yBA8Bd,SAAYpJ,GAAU,IAAD,OACXqJ,EAAmBjJ,KAAKP,MAAM6H,WAAW9H,OACzC0J,EAAiBlJ,KAAKP,MAAM6H,WAAWlG,KACvCmG,EAAcvH,KAAKP,MAAMwH,QACzBX,EAAQtG,KAAKP,MAAM6G,MAEnB/D,EAAWC,OAAOC,OAAO,GAAIzC,KAAKP,cACjC8C,EAAS6E,SAAS8B,GAAgBD,GACqB,IAA1DzG,OAAOiD,KAAKlD,EAAS6E,SAAS8B,IAAiB7F,eACxCd,EAAS6E,SAAS8B,GAE7B3G,EAASgF,cAEJhF,EAASmE,QAAQa,KAClBhF,EAASmE,QAAQa,GAAe,CAC5BvB,KAAMM,EAAMiB,GAAavB,KACzBpG,QAAS,EACT6G,MAAO,IAIflE,EAASmE,QAAQa,GAAad,QAC1B7G,IACA2C,EAASkF,eACTlF,EAASmE,QAAQa,GAAa3H,WAGlCI,KAAKM,SAASiC,GAAU,WAGpB,GAFoB,EAAK9C,MAAM8H,aACZ,EAAK9H,MAAM+H,WAE1B,EAAKuB,iBACF,CACH,IAAMxG,EAAWC,OAAOC,OAAO,GAAI,EAAKhD,OACxC8C,EAAS0E,QAAU,UACnB,EAAK3G,SAASiC,S,0BAK1B,WACI,IAAMA,EAAWC,OAAOC,OAAO,GAAIzC,KAAKP,OACxC8C,EAAS0E,QAAU,OACnBjH,KAAKM,SAASiC,K,wBAGlB,WACI,IAAM6E,EAAWpH,KAAKP,MAAM2H,SACtBC,EAAWrH,KAAKP,MAAM4H,SACtB8B,EAAW3G,OAAOiD,KAAK2B,GAAUzD,eAAmBnB,OAAOiD,KAAK2B,GAAU/D,SAC1E+F,EAAU5G,OAAOiD,KAAK2B,EAAS+B,IAAWxF,eAAmBnB,OAAOiD,KAAK2B,EAAS+B,IAAW9F,SAC7FnE,EAAOkI,EAAS+B,GAAUC,GAC1BC,EAAerJ,KAAKsJ,cAAcjC,EAAUnI,GAElD0J,QAAQC,IAAI,kBAAmB3J,GAC/B0J,QAAQC,IAAI,kBAAmBQ,GAE/B,IAAM9G,EAAWC,OAAOC,OAAO,GAAIzC,KAAKP,OACxC8C,EAAS+E,WAAapI,EACtBqD,EAAS0E,QAAUoC,EACnBrJ,KAAKM,SAASiC,K,2BAIlB,SAAc8E,EAAUnI,GACpB,IAAMoH,EAAQtG,KAAKP,MAAM6G,MACnBiD,EAAa,GAWnB,OARAlC,EAASnF,SAAQ,SAAAmG,GACT/B,EAAM+B,GAAMnB,eAAe7G,SAASnB,EAAKkC,OACzCmI,EAAW5I,KAAK0H,MAITkB,EAAW5F,eAAmB4F,EAAWlG,W,oBAK5D,WAAU,IAKFgF,EALC,OACCpB,EAAUjH,KAAKP,MAAMwH,QACrB/H,EAAOc,KAAKP,MAAM6H,WAClBC,EAAcvH,KAAKP,MAAM8H,YACzBC,EAAaxH,KAAKP,MAAM+H,WAG9B,MAAgB,SAAZP,EAEI,8BACI,qBAAKuC,GAAG,YAAR,SACI,cAAC,EAAD,CACArD,eAAgB,SAACrG,GAAD,OAAW,EAAKqG,eAAerG,IAC/CsG,aAAc,SAACtG,GAAD,OAAW,EAAKsG,aAAatG,IAC3CuG,QAASrG,KAAKP,MAAM4G,QACpBC,MAAOtG,KAAKP,MAAM6G,YAIX,YAAZW,EAEH,8BACI,qBAAKuC,GAAG,YAAYlI,MAAM,cAA1B,SACI,6DAIO,YAAZ2F,EAEC,8BACI,qBAAKuC,GAAG,YAAR,SACI,cAAC,EAAD,CACI5J,QAASI,KAAKP,MAAMgI,aACpBhB,MAAOzG,KAAKP,MAAM+H,WAClBd,QAAS1G,KAAKP,MAAMiH,QACpBF,aAAc,kBAAM,EAAKA,uBAM7B,cAAZS,EAAyBoB,EAAO,cAAC,EAAD,CAAkDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QACzD,SAAZyH,EAAoBoB,EAAO,cAAC,EAAD,CAA6CnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QACpD,SAAZyH,EAAoBoB,EAAO,cAAC,EAAD,CAA6CnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QACpD,kBAAZyH,EAA6BoB,EAAO,cAAC,EAAD,CAAmDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QACnE,kBAAZyH,EAA6BoB,EAAO,cAAC,EAAD,CAAgDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QAChE,wBAAZyH,EAAmCoB,EAAO,cAAC,EAAD,CAAwDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QAC9E,gBAAZyH,EAA2BoB,EAAO,cAAC,EAAD,CAA8CnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QAC5D,eAAZyH,EAA0BoB,EAAO,cAAC,EAAD,CAA6CnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QAC1D,mBAAZyH,EAA8BoB,EAAO,cAAC,EAAD,CAAoDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QACrE,mBAAZyH,EAA8BoB,EAAO,cAAC,EAAD,CAAiDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QAClE,yBAAZyH,EAAoCoB,EAAO,cAAC,EAAD,CAAyDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QAChF,iBAAZyH,EAA4BoB,EAAO,cAAC,EAAD,CAA+CnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QAC9D,cAAZyH,EAAyBoB,EAAO,cAAC,EAAD,CAA6CnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QACzD,kBAAZyH,EAA6BoB,EAAO,cAAC,EAAD,CAAiDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QACjE,qBAAZyH,EAAgCoB,EAAO,cAAC,EAAD,CAAoDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QACvE,UAAZyH,EAAqBoB,EAAO,cAAC,EAAD,CAAmDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,QAC3D,UAAZyH,IAAqBoB,EAAO,cAAC,EAAD,CAAmDnJ,KAAMA,EAAM2B,YAAa,SAACjB,GAAD,OAAa,EAAKiB,YAAYjB,KAAjFV,EAAKE,QAAQF,EAAKM,SAG5E,8BACI,sBAAKgK,GAAG,YAAYlI,MAAM,cAA1B,UACI,gCAAMiG,EAAN,IAAoBC,KACnBa,Y,GAtTFzG,IAAMC,WA+T7B4H,IAASC,OACL,gCACI,cAAC,EAAD,IACA,qBAAKpI,MAAM,wBAAX,SACI,qFACiD,uBADjD,4KAQRP,SAAS4I,eAAe,U,gBCxZ5BC,EAAOC,QAAU,CAAEC,aAhBnB,SAAsBC,GAClB,OAAOnE,KAAKC,MAAMD,KAAKoE,SAAWD,IAeLE,SAZjC,SAAkBC,EAAKC,EAAS3J,GAE5B,IADA,IAAI4J,EAAeD,EAAQ9G,OAAO,EACzBwB,EAAI,EAAGA,EAAIuF,IAAiBvF,EAAG,CACtC,IAAIa,EAAMyE,EAAQtF,GACZa,KAAOwE,IACXA,EAAIxE,GAAO,IAEbwE,EAAMA,EAAIxE,GAEZwE,EAAIC,EAAQC,IAAiB5J,K","file":"static/js/main.280c7a16.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nexport default class EngToJapGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.english;\n        const kanaAnswer = word.hiragana;\n        const romajiAnswer = word.romaji;\n\n        this.state = {\n            question: question,\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(\" \", \"\");\n        const reasonableAnswers = this.determineReasonableAnswers(kanaAnswer).concat(this.determineReasonableAnswers(romajiAnswer));\n        let correct = false;\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    determineReasonableAnswers(str) {\n        const reasonableAnswers = [];\n        \n        str = str.toLowerCase();\n        reasonableAnswers.push(str);\n\n        str = str.replace(/\\s*[＋+].*/giu, \"\");\n        reasonableAnswers.push(str);\n\n        str = str.replace(\"~\", \"\");\n        str = str.replace(\".\", \"\");\n        str = str.replace(\"'\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        reasonableAnswers.push(str.replace(/\\s*\\([^)]*\\)\\s*/giu, \"\"))\n\n        str = str.replace(\"(\", \"\");\n        str = str.replace(\")\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        return reasonableAnswers;\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What is the Japanese word for this?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What is the Japanese word for this?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class JapToEngGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const answer = word.english;\n\n        this.state = {\n            question: question,\n            answer: answer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const answer = this.state.answer.toLowerCase().replace(/[.~[\\s?'’]+/giu, \"\");\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s?'’]+/giu, \"\");\n        const answers = answer.split(';');\n        let correct = false;\n        let reasonableAnswers = [];\n        reasonableAnswers.push(answer);\n        answers.forEach(ans => {\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans));\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans.replace('-', ' ')));\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans.replace('-', '')));\n        });\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    determineReasonableAnswers(str) {\n        const reasonableAnswers = [];\n\n        reasonableAnswers.push(str);\n\n        str = str.replace(/\\s*[＋+].*/giu, \"\");\n        reasonableAnswers.push(str);\n\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        reasonableAnswers.push(str.replace(/\\s*\\([^)]*\\)\\s*/giu, \"\"))\n\n        str = str.replace(\"(\", \"\");\n        str = str.replace(\")\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        return reasonableAnswers;\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const answer = this.state.answer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What is the English definition of this word?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer in English, punctuation and capitalization is ignored.</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{answer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is '\" + answer + \"'.\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What is the English definition of this word?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class AdjectiveTypeGame extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const word = this.props.word;\n        let question;\n        let answer;\n        let solution;\n        if (word.type === \"na-adjective\") {\n            question = word.hiragana.match(/.*(?=\\s\\(な\\))/giu)[0];\n            answer = question + \"（な）\";\n            solution = 'な';\n        } else {\n            question = word.hiragana.match(/.*(?=い$)/giu)[0];\n            answer = question + \"（い）\";\n            solution = 'い';\n        }\n\n        this.state = {\n            question: question,\n            answer: answer,\n            solution: solution,\n            answered: false,\n            correct: false\n        }\n    }\n\n    answerHandler(answer) {\n        const solution = this.state.solution;\n        let correct = false;\n\n        if (answer === solution) {\n            correct = true;\n        }\n\n        const newState = Object.assign({}, this.state);\n        newState.correct = correct;\n        newState.answered = true;\n        this.setState(newState);\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const answer = this.state.answer;\n        const solution = this.state.solution;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What type of adjective is this? (な/い)</h3>\n                    <div>\n                        <h2>{question}<span class=\"red\">（　）</span></h2>\n                    </div>\n                    <div class=\"center-text\">\n                        <button class=\"btn bg-gray\" onClick={() => this.answerHandler(\"な\")}>な</button>\n                        <button class=\"btn bg-gray\" onClick={() => this.answerHandler(\"い\")}>い</button>\n                    </div>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct! This is a \" + solution + \" adjective!\";\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. This is a \" + solution + \" adjective!\";\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What type of adjective is this? (な/い)</h3>\n                    <div>\n                        <h2><span class={resultColor}>{answer}</span></h2>\n                        <h3>{resultAnswer}</h3>\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","const U_VERB_I_CONVERSION_TABLE = {\n    \"う\": \"い\",\n    \"く\": \"き\",\n    \"ぐ\": \"ぎ\",\n    \"す\": \"し\",\n    \"ず\": \"じ\",\n    \"つ\": \"ち\",\n    \"づ\": \"ぢ\",\n    \"ぬ\": \"に\",\n    \"ふ\": \"ひ\",\n    \"ぶ\": \"び\",\n    \"ぷ\": \"ぴ\",\n    \"む\": \"み\",\n    \"る\": \"り\"\n}\n\nconst U_VERB_A_CONVERSION_TABLE = {\n    \"う\": \"わ\",\n    \"く\": \"か\",\n    \"ぐ\": \"が\",\n    \"す\": \"さ\",\n    \"ず\": \"ざ\",\n    \"つ\": \"た\",\n    \"づ\": \"だ\",\n    \"ぬ\": \"な\",\n    \"ふ\": \"は\",\n    \"ぶ\": \"ば\",\n    \"ぷ\": \"ぱ\",\n    \"む\": \"ま\",\n    \"る\": \"ら\"\n}\n\nconst U_VERB_TE_CONVERSION_TABLE = {\n    \"う\": \"って\",\n    \"く\": \"いて\",\n    \"ぐ\": \"いで\",\n    \"す\": \"して\",\n    \"つ\": \"って\",\n    \"ぬ\": \"んで\",\n    \"ぶ\": \"んで\",\n    \"む\": \"んで\",\n    \"る\": \"って\"\n}\n\nconst VERB_TE_OVERRIDES = {\n    \"いく\": \"いって\"\n}\n\nconst ADJ_LONG_PRES_NEG_OVERRIDES = {\n    \"いい\": \"よくないです\",\n    \"かっこいい\": \"かっこよくないです\",\n    \"あたまがいい\": \"あたまがよくないです\"\n}\n\nconst ADJ_SHORT_PRES_NEG_OVERRIDES = {\n    \"いい\": \"よくない\",\n    \"かっこいい\": \"かっこよくない\",\n    \"あたまがいい\": \"あたまがよくない\"\n}\n\nconst ADJ_PAST_POS_OVERRIDES = {\n    \"いい\": \"よかったです\",\n    \"かっこいい\": \"かっこよかったです\",\n    \"あたまがいい\": \"あたまがよかったです\"\n}\n\nconst ADJ_PAST_NEG_OVERRIDES = {\n    \"いい\": \"よくなかったです\",\n    \"かっこいい\": \"かっこよくなかったです\",\n    \"あたまがいい\": \"あたまがよくなかったです\"\n}\n\nconst ADJ_TE_OVERRIDES = {\n    \"いい\": \"よくて\",\n    \"かっこいい\": \"かっこよくて\",\n    \"あたまがいい\": \"あたまがよくて\"\n}\n\nexport function verbLongPresentPositive(word) {\n    let result = word.hiragana;\n\n    if (word.type === \"ru-verb\") {\n        result = result.replace(/る$/giu, \"ます\");\n    } else if (word.type === \"u-verb\") {\n        result = result.replace(/.$/giu, U_VERB_I_CONVERSION_TABLE[result[result.length - 1]] + \"ます\")\n    } else if (word.type === \"irregular-verb\") {\n        result = result.replace(/する$/giu, \"し\");\n        result = result.replace(/くる$/giu, \"き\");\n        result += \"ます\";\n    }\n\n    return result;\n}\n\nexport function verbLongPresentNegative(word) {\n    let result = word.hiragana;\n\n    if (word.type === \"ru-verb\") {\n        result = result.replace(/る$/giu, \"ません\");\n    } else if (word.type === \"u-verb\") {\n        result = result.replace(/.$/giu, U_VERB_I_CONVERSION_TABLE[result[result.length - 1]] + \"ません\")\n    } else if (word.type === \"irregular-verb\") {\n        result = result.replace(/する$/giu, \"し\");\n        result = result.replace(/くる$/giu, \"き\");\n        result += \"ません\";\n    }\n\n    return result;\n}\n\nexport function verbLongPastPositive(word) {\n    let result = word.hiragana;\n\n    if (word.type === \"ru-verb\") {\n        result = result.replace(/る$/giu, \"ました\");\n    } else if (word.type === \"u-verb\") {\n        result = result.replace(/.$/giu, U_VERB_I_CONVERSION_TABLE[result[result.length - 1]] + \"ませんでした\")\n    } else if (word.type === \"irregular-verb\") {\n        result = result.replace(/する$/giu, \"し\");\n        result = result.replace(/くる$/giu, \"き\");\n        result += \"ました\";\n    }\n\n    return result;\n}\n\nexport function verbLongPastNegative(word) {\n    let result = word.hiragana;\n    \n    if (word.type === \"ru-verb\") {\n        result = result.replace(/る$/giu, \"ませんでした\");\n    } else if (word.type === \"u-verb\") {\n        result = result.replace(/.$/giu, U_VERB_I_CONVERSION_TABLE[result[result.length - 1]] + \"ませんでした\")\n    } else if (word.type === \"irregular-verb\") {\n        result = result.replace(/する$/giu, \"し\");\n        result = result.replace(/くる$/giu, \"き\");\n        result += \"ませんでした\";\n    }\n\n    return result;\n}\n\nexport function verbShortPresentPositive(word) {\n    let result = word.hiragana;\n\n    //nothing to do, equivalent to dictionary form!\n\n    return result;\n}\n\nexport function verbShortPresentNegative(word) {\n    let result = word.hiragana;\n\n    if (result === \"ある\") {\n        result = \"ない\";\n    } else if (word.type === \"ru-verb\") {\n        result = result.replace(/る$/giu, \"ない\");\n    } else if (word.type === \"u-verb\") {\n        result = result.replace(/.$/giu, U_VERB_A_CONVERSION_TABLE[result[result.length - 1]] + \"ない\")\n    } else if (word.type === \"irregular-verb\") {\n        result = result.replace(/する$/giu, \"しない\");\n        result = result.replace(/くる$/giu, \"こない\");\n    }\n\n    return result;\n}\n\nexport function verbTe(word) {\n    let result = word.hiragana;\n\n    if (VERB_TE_OVERRIDES[result]) {\n        result = VERB_TE_OVERRIDES[result];\n    } else if (word.type === \"ru-verb\") {\n        result = result.replace(/る$/giu, \"て\");\n    } else if (word.type === \"u-verb\") {\n        result = result.replace(/.$/giu, U_VERB_TE_CONVERSION_TABLE[result[result.length - 1]])\n    } else if (word.type === \"irregular-verb\") {\n        result = result.replace(/する$/giu, \"して\");\n        result = result.replace(/くる$/giu, \"きて\");\n    }\n\n    return result;\n}\n\nexport function adjLongPresentPositive(word) {\n    let result = word.hiragana;\n\n    if (word.type === \"na-adjective\") {\n        result = result.replace(/\\s\\(な\\)/giu, \"です\");\n    } else if (word.type === \"i-adjective\") {\n        result = result + \"です\";\n    }\n\n    return result;\n}\n\nexport function adjLongPresentNegative(word) {\n    let result = word.hiragana;\n\n    if (ADJ_LONG_PRES_NEG_OVERRIDES[result]) {\n        result = ADJ_LONG_PRES_NEG_OVERRIDES[result];\n    } else if (word.type === \"na-adjective\") {\n        result = result.replace(/\\s\\(な\\)/giu, \"じゃないです\");\n    } else if (word.type === \"i-adjective\") {\n        result = result.replace(/い$/giu, \"くないです\");\n    }\n\n    return result;\n\n}\n\nexport function adjLongPastPositive(word) {\n    let result = word.hiragana;\n\n    if (ADJ_PAST_POS_OVERRIDES[result]) {\n        result = ADJ_PAST_POS_OVERRIDES[result];\n    } else if (word.type === \"na-adjective\") {\n        result = result.replace(/\\s\\(な\\)/giu, \"だった\");\n    } else if (word.type === \"i-adjective\") {\n        result = result.replace(/い$/giu, \"かったです\");\n    }\n\n    return result;\n}\n\nexport function adjLongPastNegative(word) {\n    let result = word.hiragana;\n\n    if (ADJ_PAST_NEG_OVERRIDES[result]) {\n        result = ADJ_PAST_NEG_OVERRIDES[result];\n    } else if (word.type === \"na-adjective\") {\n        result = result.replace(/\\s\\(な\\)/giu, \"じゃなかったです\");\n    } else if (word.type === \"i-adjective\") {\n        result = result.replace(/い$/giu, \"くなかったです\");\n    }\n\n    return result;\n}\n\nexport function adjShortPresentPositive(word) {\n    let result = word.hiragana;\n\n    if (word.type === \"na-adjective\") {\n        result = result.replace(/\\s\\(な\\)/giu, \"\");\n    }\n\n    return result;\n}\n\nexport function adjShortPresentNegative(word) {\n    let result = word.hiragana;\n\n    if (ADJ_SHORT_PRES_NEG_OVERRIDES[result]) {\n        result = ADJ_SHORT_PRES_NEG_OVERRIDES[result];\n    } else if (word.type === \"na-adjective\") {\n        result = result.replace(/\\s\\(な\\)/giu, \"じゃない\");\n    } else if (word.type === \"i-adjective\") {\n        result = result.replace(/い$/giu, \"くない\");\n    }\n\n    return result;\n\n}\n\nexport function adjTe(word) {\n    let result = word.hiragana;\n\n    if (ADJ_TE_OVERRIDES[result]) {\n        result = ADJ_TE_OVERRIDES[result];\n    } else if (word.type === \"na-adjective\") {\n        result = result.replace(/\\s\\(な\\)/giu, \"で\");\n    } else if (word.type === \"i-adjective\") {\n        result = result.replace(/い$/giu, \"くて\");\n    }\n\n    return result;\n}","import React from 'react';\nimport './index.css';\nimport * as conjugate from './conjugation-utils';\nimport * as utils from './utils';\nimport * as wanakana from 'wanakana';\n\nexport default class AdjConjPresentGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const type = utils.getRandomInt(2);\n        const kanaAnswer = (type === 0) ? \n            conjugate.adjLongPresentPositive(word) : \n            conjugate.adjLongPresentNegative(word);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            type: (type === 0) ? \"affirmative\" : \"negative\",\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const type = this.state.type;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">long form present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">long form present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as conjugate from './conjugation-utils';\nimport * as utils from './utils';\nimport * as wanakana from 'wanakana';\n\nexport default class AdjConjPastGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const type = utils.getRandomInt(2);\n        const kanaAnswer = (type === 0) ? \n            conjugate.adjLongPastPositive(word) : \n            conjugate.adjLongPastNegative(word);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            type: (type === 0) ? \"affirmative\" : \"negative\",\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const type = this.state.type;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">long form past {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">long form past {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as conjugate from './conjugation-utils';\nimport * as utils from './utils';\nimport * as wanakana from 'wanakana';\n\nexport default class AdjConjShortPresentGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const type = utils.getRandomInt(2);\n        const kanaAnswer = (type === 0) ? \n            conjugate.adjShortPresentPositive(word) : \n            conjugate.adjShortPresentNegative(word);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            type: (type === 0) ? \"affirmative\" : \"negative\",\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const type = this.state.type;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">short form present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">short form present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as conjugate from './conjugation-utils';\nimport * as wanakana from 'wanakana';\n\nexport default class AdjConjTeGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const kanaAnswer = conjugate.adjTe(word);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">te-form</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">adjective</span> with the <span class=\"question-highlight\">te-form</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class VerbTypeGame extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const word = this.props.word;\n        const question = word.hiragana;\n        let solution;\n\n        if (word.type === \"u-verb\") solution = \"u\";\n        else if (word.type === \"ru-verb\") solution = \"る\";\n        else solution = \"irr.\"\n\n        this.state = {\n            question: question,\n            solution: solution,\n            answered: false,\n            correct: false\n        }\n    }\n\n    answerHandler(answer) {\n        const solution = this.state.solution;\n        let correct = false;\n\n        if (answer === solution) {\n            correct = true;\n        }\n\n        const newState = Object.assign({}, this.state);\n        newState.correct = correct;\n        newState.answered = true;\n        this.setState(newState);\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const solution = this.state.solution;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What type of verb is this? (u/る/irregular)</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div class=\"center-text\">\n                        <button class=\"btn bg-gray\" onClick={() => this.answerHandler(\"u\")}>u</button>\n                        <button class=\"btn bg-gray\" onClick={() => this.answerHandler(\"る\")}>る</button>\n                        <button class=\"btn bg-gray\" onClick={() => this.answerHandler(\"irr.\")}>irr.</button>\n                    </div>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct! This is a \" + solution + \" verb!\";\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. This is a \" + solution + \" verb!\";\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What type of verb is this? (u/る/irregular)</h3>\n                    <div>\n                        <h2><span class={resultColor}>{question}</span></h2>\n                        <h3>{resultAnswer}</h3>\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as conjugate from './conjugation-utils';\nimport * as utils from './utils';\nimport * as wanakana from 'wanakana';\n\nexport default class VerbConjPresentGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const type = utils.getRandomInt(2);\n        const kanaAnswer = (type === 0) ? \n            conjugate.verbLongPresentPositive(word) : \n            conjugate.verbLongPresentNegative(word);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            type: (type === 0) ? \"affirmative\" : \"negative\",\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const type = this.state.type;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the <span class=\"question-highlight\">long form present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the <span class=\"question-highlight\">long form present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as conjugate from './conjugation-utils';\nimport * as utils from './utils';\nimport * as wanakana from 'wanakana';\n\nexport default class VerbConjPastGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const type = utils.getRandomInt(2);\n        const kanaAnswer = (type === 0) ? \n            conjugate.verbLongPastPositive(word) : \n            conjugate.verbLongPastNegative(word);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            type: (type === 0) ? \"affirmative\" : \"negative\",\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const type = this.state.type;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the <span class=\"question-highlight\">long form past {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the <span class=\"question-highlight\">long form past {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as conjugate from './conjugation-utils';\nimport * as utils from './utils';\nimport * as wanakana from 'wanakana';\n\nexport default class VerbConjShortPresentGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const type = utils.getRandomInt(2);\n        const kanaAnswer = (type === 0) ? \n            conjugate.verbShortPresentPositive(word) : \n            conjugate.verbShortPresentNegative(word);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            type: (type === 0) ? \"affirmative\" : \"negative\",\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const type = this.state.type;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the <span class=\"question-highlight\">short form present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the <span class=\"question-highlight\">short form present {type}</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\nimport * as conjugate from './conjugation-utils';\nimport * as wanakana from 'wanakana';\n\nexport default class VerbConjTeGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.hiragana;\n        const kanaAnswer = conjugate.verbTe(word);\n        const romajiAnswer = wanakana.toRomaji(kanaAnswer);\n\n        this.state = {\n            question: question,\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s']+/giu, \"\");\n        let correct = false;\n\n        if (userAnswer === kanaAnswer || userAnswer === romajiAnswer) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the <span class=\"question-highlight\">te-form</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Conjugate this <span class=\"question-highlight\">verb</span> with the <span class=\"question-highlight\">te-form</span> ending.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport * as conjugate from './conjugation-utils';\nimport * as utils from './utils';\nimport './index.css';\n\nexport default class VerbRootGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const conjugations = [\n            conjugate.verbLongPresentPositive,\n            conjugate.verbLongPresentNegative,\n            conjugate.verbLongPastPositive,\n            conjugate.verbLongPastNegative,\n            conjugate.verbTe,\n            conjugate.verbTe,\n            conjugate.verbTe\n        ]; //add verbTe multiple times to increase random weight.\n        const word = this.props.word;\n        const type = utils.getRandomInt(7);\n        const question = conjugations[type](word);\n        const kanaAnswer = word.hiragana;\n        const romajiAnswer = word.romaji;\n\n        this.state = {\n            question: question,\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(\" \", \"\");\n        const reasonableAnswers = this.determineReasonableAnswers(kanaAnswer).concat(this.determineReasonableAnswers(romajiAnswer));\n        let correct = false;\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    determineReasonableAnswers(str) {\n        const reasonableAnswers = [];\n        \n        str = str.toLowerCase();\n        reasonableAnswers.push(str);\n\n        str = str.replace(/\\s*[＋+].*/giu, \"\");\n        reasonableAnswers.push(str);\n\n        str = str.replace(\"~\", \"\");\n        str = str.replace(\".\", \"\");\n        str = str.replace(\"'\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        reasonableAnswers.push(str.replace(/\\s*\\([^)]*\\)\\s*/giu, \"\"))\n\n        str = str.replace(\"(\", \"\");\n        str = str.replace(\")\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        return reasonableAnswers;\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What is the dictionary form for this verb?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What is the dictionary form for this verb?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class KanjiReadingGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.kanji;\n        const kanaReadings = word.hiragana;\n        const romajiReadings = word.romaji;\n\n        this.state = {\n            question: question,\n            kanaReadings: kanaReadings,\n            romajiReadings: romajiReadings,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaReadings = this.state.kanaReadings;\n        const romajiReadings = this.state.romajiReadings;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(\" \", \"\");\n        const reasonableAnswers = kanaReadings.split(';').concat(romajiReadings.toLowerCase().split(';'));\n        let correct = false;\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaReadings = this.state.kanaReadings.split(';');\n        const romajiReadings = this.state.romajiReadings.split(';');\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n        let answerCombos = [];\n\n        for (let i = 0; i < kanaReadings.length; i++) {\n            answerCombos.push(kanaReadings[i] + \" / \" + romajiReadings[i]);\n        }\n\n        answerCombos = answerCombos.map(answer => {\n            return (\n                <span class=\"readings-answer\">{answer}</span>\n            );\n        });\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Give any one <span class=\"question-highlight\">reading</span> for the following Kanji.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        {answerCombos}\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect.\";\n                resultAnswer = (\n                    <div>\n                        {answerCombos}\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Give any one <span class=\"question-highlight\">reading</span> for the following Kanji.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class KanjiDefinitionGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.kanji;\n        const definitions = word.english;\n\n        this.state = {\n            question: question,\n            definitions: definitions,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const definitions = this.state.definitions.toLowerCase().replace(/[.~[\\s?']+/giu, \"\");\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\s?']+/giu, \"\");\n        const reasonableAnswers = definitions.split(';');\n        let correct = false;\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const definitions = this.state.definitions.split(';');\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n        let answerCombos = [];\n\n        for (let i = 0; i < definitions.length; i++) {\n            answerCombos.push(definitions[i]);\n        }\n\n        answerCombos = answerCombos.map(answer => {\n            return (\n                <span class=\"readings-answer\">{answer}</span>\n            );\n        });\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>Give any one <span class=\"question-highlight\">English definition</span> for the following Kanji.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer in English, punctuation and capitalization is ignored.</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        {answerCombos}\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect.\";\n                resultAnswer = (\n                    <div>\n                        {answerCombos}\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>Give any one <span class=\"question-highlight\">English definition</span> for the following Kanji.</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class KanjiWordToEngGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.kanji;\n        const answer = word.english;\n\n        this.state = {\n            question: question,\n            answer: answer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const answer = this.state.answer.toLowerCase().replace(/[.~[\\s?'’]+/giu, \"\");\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(/[.~[\\]\\s?'’]+/giu, \"\");\n        const answers = answer.split(';');\n        let correct = false;\n        let reasonableAnswers = [];\n        reasonableAnswers.push(answer);\n        answers.forEach(ans => {\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans));\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans.replace('-', ' ')));\n            reasonableAnswers = reasonableAnswers.concat(this.determineReasonableAnswers(ans.replace('-', '')));\n        });\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    determineReasonableAnswers(str) {\n        const reasonableAnswers = [];\n\n        reasonableAnswers.push(str);\n\n        str = str.replace(/\\s*[＋+].*/giu, \"\");\n        reasonableAnswers.push(str);\n\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        reasonableAnswers.push(str.replace(/\\s*\\([^)]*\\)\\s*/giu, \"\"))\n\n        str = str.replace(\"(\", \"\");\n        str = str.replace(\")\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        return reasonableAnswers;\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const answer = this.state.answer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What is the English definition of this word containing Kanji?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer in English, punctuation and capitalization is ignored.</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{answer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is '\" + answer + \"'.\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What is the English definition of this word containing Kanji?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default class KanjiWordToJapGame extends React.Component {\n    constructor(props) {\n        super(props);\n        const word = this.props.word;\n        const question = word.kanji;\n        const kanaAnswer = word.hiragana;\n        const romajiAnswer = word.romaji;\n\n        this.state = {\n            question: question,\n            kanaAnswer: kanaAnswer,\n            romajiAnswer: romajiAnswer,\n            userAnswer: \"\",\n            answered: false,\n            correct: false,\n            enterHandler: {}\n        }\n    }\n\n    answerHandler(event) {\n        event.preventDefault();\n\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer.toLowerCase().replace(\" \", \"\");\n        const reasonableAnswers = this.determineReasonableAnswers(kanaAnswer).concat(this.determineReasonableAnswers(romajiAnswer));\n        let correct = false;\n\n        if (reasonableAnswers.includes(userAnswer)) {\n            correct = true;\n        }\n\n        this.setState({answered: true, correct: correct});\n    }\n\n    typeHandler(event) {\n        this.setState({ userAnswer: event.target.value });\n    }\n\n    determineReasonableAnswers(str) {\n        const reasonableAnswers = [];\n        \n        str = str.toLowerCase();\n        reasonableAnswers.push(str);\n\n        str = str.replace(/\\s*[＋+].*/giu, \"\");\n        reasonableAnswers.push(str);\n\n        str = str.replace(\"~\", \"\");\n        str = str.replace(\".\", \"\");\n        str = str.replace(\"'\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        reasonableAnswers.push(str.replace(/\\s*\\([^)]*\\)\\s*/giu, \"\"))\n\n        str = str.replace(\"(\", \"\");\n        str = str.replace(\")\", \"\");\n        reasonableAnswers.push(str);\n        reasonableAnswers.push(str.replace(\" \", \"\"));\n\n        return reasonableAnswers;\n    }\n\n    handleEnter(event) {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n            const answered = this.state.answered;\n            const correct = this.state.correct;\n            if (answered) {\n                event.preventDefault();\n                this.props.nextHandler(correct);\n            }\n        }\n    }\n\n    componentDidMount(){\n        const enterHandler = (event) => this.handleEnter(event);\n        this.setState({enterHandler: enterHandler});\n        document.addEventListener(\"keydown\", enterHandler, false);\n    }\n\n    componentWillUnmount(){\n        const enterHandler = this.state.enterHandler;\n        document.removeEventListener(\"keydown\", enterHandler, false);\n    }\n\n    render() {\n        const question = this.state.question;\n        const kanaAnswer = this.state.kanaAnswer;\n        const romajiAnswer = this.state.romajiAnswer;\n        const userAnswer = this.state.userAnswer;\n        const answered = this.state.answered;\n        const correct = this.state.correct;\n        let resultColor = \"\";\n        let resultAnswer = \"\";\n\n        if (!answered) {\n            return (\n                <div>\n                    <h3>What is the reading (hiragana) for this word containing Kanji?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <h4>Answer with Romaji or Hiragana/Katakana (where appropriate)</h4>\n                    <form onSubmit={(event) => this.answerHandler(event)}>\n                        <input autoFocus type=\"text\" value={userAnswer} onChange={(event) => this.typeHandler(event)} />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n            );\n        } else {\n            if (correct) {\n                resultColor = \"green\";\n                resultAnswer = \"Correct!\";\n                resultAnswer = (\n                    <div>\n                        <div>{kanaAnswer} / {romajiAnswer}</div>\n                        <h3>{resultAnswer}</h3>\n                    </div>\n                );\n            } else {\n                resultColor = \"red\";\n                resultAnswer = \"Incorrect. The correct answer is \" + kanaAnswer + \" (\" + romajiAnswer + \")\";\n                resultAnswer = (\n                    <div>\n                        <h3>{resultAnswer}</h3>\n                        <button type=\"button\" onClick={() => {this.setState({correct: true})}}>Override: I was correct</button>\n                    </div>\n                );\n            }\n\n            return (\n                <div class=\"centered-fit-width\">\n                    <h3>What is the reading (hiragana) for this word containing Kanji?</h3>\n                    <div>\n                        <h2>{question}</h2>\n                    </div>\n                    <div>\n                        <h2><span class={resultColor}>{userAnswer}</span></h2>\n                        {resultAnswer}\n                        <button class=\"wide-btn bg-green\" onClick={() => this.props.nextHandler(correct)}>Next</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}","import React from 'react';\nimport './index.css';\n\nconst NUM_PER_COL = 10;\nexport default class OptionsComponent extends React.Component {\n\n    render() {\n        const title = this.props.title;\n        const identifier = this.props.identifier;\n        const type = this.props.type;\n        const callback = this.props.callback;\n        const options = this.props.options;\n        const dividedOptions = [];\n\n        let i = 0;\n        Object.keys(options).forEach(key => {\n            const col = Math.floor(i / NUM_PER_COL); \n            if (!dividedOptions[col]) dividedOptions[col] = {};\n            dividedOptions[col][key] = options[key];\n            i++;\n        });\n\n        const elems = dividedOptions.map(colItems => {\n            const col = Object.keys(colItems).map(key => {\n                return (\n                    <label key={key} class=\"options-item\">\n                    <input type={type} value={key} name={identifier} checked={colItems[key].value} onChange={callback} />\n                    {colItems[key].name}\n                </label>\n                )\n            });\n\n            return (\n                 <div class=\"options-column\">\n                     {col}\n                 </div>\n            );\n        })\n\n        //const elems = Object.keys(options).map((key) => {\n        //    return (\n        //        <label key={key} class=\"options-item\">\n        //            <input type={type} value={key} name={identifier} checked={options[key].value} onChange={callback} />\n        //            {options[key].name}\n        //        </label>\n        //    )\n        //});\n\n        return (\n            <div class=\"options-container\">\n                <div>\n                    <span class=\"bold\">{title}</span>\n                    <div>\n                        {elems}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as utils from './utils';\nimport EngToJapGame from './etoj-game';\nimport JapToEngGame from './jtoe-game';\nimport AdjectiveTypeGame from './adjective-type-game';\nimport AdjConjPresentGame from './adjective-conj-present-game';\nimport AdjContPastGame from './adjective-conj-past-game';\nimport AdjConjShortPresentGame from './adjective-conj-short-present-game';\nimport AdjConjTeGame from './adjective-conj-te-game';\nimport VerbTypeGame from './verb-type-game';\nimport VerbConjPresentGame from './verb-conj-present-game';\nimport VerbConjPastGame from './verb-conj-past-game';\nimport VerbConjShortPresentGame from './verb-conj-short-present-game';\nimport VerbConjTeGame from './verb-conj-te-game';\nimport VerbRootGame from './verb-root-game';\nimport KanjiReadingGame from './kanji-reading-game';\nimport KanjiDefinitionGame from './kanji-definition-game';\nimport KanjiWordToEngGame from './kwtoe-game';\nimport KanjiWordToJapGame from './kwtoj-game';\nimport OptionsComponent from './options-component';\n\nconst EDITION = 3;\n\nclass MainMenu extends React.Component {\n\n    render() {\n        const optionsHandler = this.props.optionsHandler;\n        const startHandler = this.props.startHandler;\n        const lessons = this.props.lessons;\n        const games = this.props.games;\n\n        return (\n            <div class=\"main-menu\">\n                <div class=\"center-text\">\n                    <h1>GENKI Companion</h1>\n                    <h2>Study GENKI vocabulary and conjugation alongside your classes.</h2>\n                </div>\n                <br/>\n                <div class=\"options\">\n                    <OptionsComponent \n                        title=\"Select Lessons\"\n                        identifier=\"lessons\" \n                        options = {lessons}\n                        type=\"checkbox\"\n                        callback={optionsHandler} />\n\n                    <OptionsComponent \n                        title=\"Select Games\" \n                        identifier=\"games\"\n                        options = {games}\n                        type=\"checkbox\"\n                        callback={optionsHandler} />\n                </div>\n                <div class=\"center-text\">\n                    <button class=\"wide-btn bg-green\" onClick={startHandler}>Start</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ResultsMenu extends React.Component {\n\n    render() {\n        const resetHandler = this.props.resetHandler;\n        const correct = this.props.correct;\n        const total = this.props.total;\n        const results = this.props.results;\n        const resultsList = Object.keys(results).map((key) => {\n            const localCorrect = results[key].correct;\n            const localTotal = results[key].total;\n            const localName = results[key].name;\n            return (\n                <div key={localName} class=\"result-item\">\n                    {localName}: {localCorrect}/{localTotal} ({Math.round(localCorrect*1000/localTotal)/10}%)\n                </div>\n            );\n        });\n        return (\n            <div class=\"center-text\">\n                <h1>Results</h1>\n                <h2>Score: {correct}/{total} ({Math.round(correct*1000/total)/10}%)</h2>\n                <div class=\"result-container\">\n                    {resultsList}\n                </div>\n                <button class=\"wide-btn bg-green\" onClick={resetHandler}>Return to Menu</button>\n            </div>\n        );\n    }\n}\n\nclass MainView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            display: \"loading\",\n            lessons: {\n                \"G\": {name: \"Greetings\", value: false},\n                \"L1\": {name: \"Lesson 1\", value: false},\n                \"L2\": {name: \"Lesson 2\", value: false},\n                \"L3\": {name: \"Lesson 3\", value: false},\n                \"L4\": {name: \"Lesson 4\", value: false},\n                \"L5\": {name: \"Lesson 5\", value: false},\n                \"L6\": {name: \"Lesson 6\", value: false},\n                \"L7\": {name: \"Lesson 7\", value: false},\n                \"L8\": {name: \"Lesson 8\", value: false},\n                \"L9\": {name: \"Lesson 9\", value: false},\n            },\n            games: {\n                \"jtoe\": {name: \"Define Japanese in English\", value: false, validWordTypes: [\"adverb\", \"expression\", \"i-adjective\", \"irregular-verb\", \"na-adjective\", \"noun\", \"particle\", \"prefix\", \"ru-verb\", \"suffix\", \"u-verb\"]},\n                \"etoj\": {name: \"Define English in Japanese\", value: false, validWordTypes: [\"adverb\", \"expression\", \"i-adjective\", \"irregular-verb\", \"na-adjective\", \"noun\", \"particle\", \"prefix\", \"ru-verb\", \"suffix\", \"u-verb\"]},\n                \"kanji-reading\": {name: \"Kanji Readings\", value: false, validWordTypes: [\"kanji\"]},\n                \"kanji-definition\": {name: \"Kanji Definitions\", value: false, validWordTypes: [\"kanji\"]},\n                \"kwtoe\": {name: \"Kanji Word English Definitions\", value: false, validWordTypes: [\"kanji-word\"]},\n                \"kwtoj\": {name: \"Kanji Word Readings\", value: false, validWordTypes: [\"kanji-word\"]},\n                \"adj-types\": {name: \"Adjective Types\", value: false, validWordTypes: [\"i-adjective\", \"na-adjective\"]},\n                \"adj-pres-conj\": {name: \"Long Present Adjective Conjugation\", value: false, validWordTypes: [\"i-adjective\", \"na-adjective\"]},\n                \"adj-past-conj\": {name: \"Long Past Adjective Conjugation\", value: false, validWordTypes: [\"i-adjective\", \"na-adjective\"]},\n                \"adj-short-past-conj\": {name: \"Short Present Adjective Conjugation\", value: false, validWordTypes: [\"i-adjective\", \"na-adjective\"]},\n                \n                \"adj-te-conj\": {name: \"Te-form Adjective Conjugation\", value: false, validWordTypes: [\"i-adjective\", \"na-adjective\"]},\n                \"verb-types\": {name: \"Verb Types\", value: false, validWordTypes: [\"irregular-verb\", \"ru-verb\", \"u-verb\"]},\n                \"verb-pres-conj\": {name: \"Long Form Present Verb Conjugation\", value: false, validWordTypes: [\"irregular-verb\", \"ru-verb\", \"u-verb\"]},\n                \"verb-past-conj\": {name: \"Long Form Past Verb Conjugation\", value: false, validWordTypes: [\"irregular-verb\", \"ru-verb\", \"u-verb\"]},\n                \"verb-pres-short-conj\": {name: \"Short Form Present Verb Conjugation\", value: false, validWordTypes: [\"irregular-verb\", \"ru-verb\", \"u-verb\"]},\n                \n                \"verb-te-conj\": {name: \"Te-form Verb Conjugation\", value: false, validWordTypes: [\"irregular-verb\", \"ru-verb\", \"u-verb\"]},\n                \"verb-root\": {name: \"Conjugated Verb Dictionary Forms\", value: false, validWordTypes: [\"irregular-verb\", \"ru-verb\", \"u-verb\"]}\n            },\n            words: {},\n            wordPool: {},\n            gamePool: {},\n            activeWord: {},\n            currentGame: 0,\n            totalGames: 0,\n            correctGames: 0,\n            results: {}\n        };\n        this.loadWords();\n    }\n\n    loadWords() {\n        fetch(\n            \"words.json\", \n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\"\n                }\n            }\n        ).then((response) => {\n            return response.json();\n        }).then((json) => {\n            const parsedWords = {};\n\n            json.forEach(element => {\n                utils.populate(parsedWords, [element.edition, element.lesson, element.type, element.romaji], element);\n            });\n\n            const newState = Object.assign({}, this.state);\n            newState.words = parsedWords;\n            newState.display = \"menu\";\n            this.setState(newState);\n        });\n    };\n\n    buildWordPool(gamePool) {\n        const games = this.state.games;\n        const words = this.state.words;\n        const lessons = this.state.lessons;\n        let validWordTypes = [];\n        const wordPool = {};\n\n        Object.keys(lessons).forEach(lesson => {\n            if (lessons[lesson].value) {\n                Object.keys(words[EDITION][lesson]).forEach(type => {\n                    Object.values(words[EDITION][lesson][type]).forEach(word => {\n                        utils.populate(wordPool, [word.type, word.romaji], word);\n                    });\n                });\n            }\n            \n        });\n\n        //get list of all word types that can be used for games in the game pool.\n        gamePool.forEach(game => {\n            validWordTypes = validWordTypes.concat(games[game].validWordTypes);\n        });\n\n        //remove duplicates.\n        validWordTypes.filter((type, index) => {\n            return (validWordTypes.indexOf(type) === index);\n        })\n\n        //remove word types that cannot be used in the game pool\n        Object.keys(wordPool).forEach(type => {\n            if (!validWordTypes.includes(type)) {\n                delete wordPool[type];\n            }\n        });\n\n        return wordPool;\n    }\n\n    buildGamePool() {\n        const games = this.state.games;\n        const gamePool = [];\n\n        Object.keys(games).forEach(game => {\n            if (games[game].value) {\n                gamePool.push(game);\n            } \n        });\n        \n        return gamePool;\n    }\n\n    optionsHandler(event) {\n        const newState = Object.assign({}, this.state);\n        newState[event.target.name][event.target.value].value = event.target.checked;\n        this.setState(newState);\n    }\n\n    startHandler() {\n        const gamePool = this.buildGamePool();\n        const wordPool = this.buildWordPool(gamePool);\n\n        if (Object.keys(gamePool).length === 0) {\n            alert(\"You haven't selected any games!\");\n            return;\n        } else if (Object.keys(wordPool).length === 0) {\n            alert(\"You haven't selected any lessons, or the lessons you selected do not have the types of words needed for the games you selected.\");\n            return;\n        }\n\n        let numGames = 0;\n\n        console.log(\"Word pool: \", wordPool); //DEBUG\n        console.log(\"Game pool: \", gamePool); //DEBUG\n\n        \n\n        Object.keys(wordPool).forEach(category => {\n            numGames += Object.keys(wordPool[category]).length;\n        });\n        \n        console.log(numGames);\n        \n        const newState = Object.assign({}, this.state);\n        newState.wordPool = wordPool;\n        newState.gamePool = gamePool;\n        newState.currentGame = 1;\n        newState.totalGames = numGames;\n        newState.correctGames = 0;\n        newState.results = {};\n        this.setState(newState, () => this.selectGame());\n    }\n\n    nextHandler(correct) {\n        const activeWordRomaji = this.state.activeWord.romaji;\n        const activeWordType = this.state.activeWord.type;\n        const currentGame = this.state.display;\n        const games = this.state.games;\n\n        const newState = Object.assign({}, this.state);\n        delete newState.wordPool[activeWordType][activeWordRomaji];\n        if (Object.keys(newState.wordPool[activeWordType]).length === 0) {\n            delete newState.wordPool[activeWordType];\n        }\n        newState.currentGame++;\n        \n        if (!newState.results[currentGame]) {\n            newState.results[currentGame] = {\n                name: games[currentGame].name,\n                correct: 0,\n                total: 0\n            }\n        }\n\n        newState.results[currentGame].total++;\n        if (correct) {\n            newState.correctGames++;\n            newState.results[currentGame].correct++;\n        }\n\n        this.setState(newState, () => {\n            const currentGame = this.state.currentGame;\n            const totalGames = this.state.totalGames;\n            if (currentGame <= totalGames) {\n                this.selectGame();\n            } else {\n                const newState = Object.assign({}, this.state);\n                newState.display = \"results\";\n                this.setState(newState);\n            }\n        });\n    }\n\n    resetHandler() {\n        const newState = Object.assign({}, this.state);\n        newState.display = \"menu\";\n        this.setState(newState);\n    }\n\n    selectGame() {\n        const wordPool = this.state.wordPool;\n        const gamePool = this.state.gamePool;\n        const wordType = Object.keys(wordPool)[utils.getRandomInt(Object.keys(wordPool).length)];\n        const wordKey = Object.keys(wordPool[wordType])[utils.getRandomInt(Object.keys(wordPool[wordType]).length)];\n        const word = wordPool[wordType][wordKey];\n        const selectedGame = this.findValidGame(gamePool, word);\n\n        console.log(\"Selected word: \", word); //DEBUG\n        console.log(\"Selected game: \", selectedGame); //DEBUG\n        \n        const newState = Object.assign({}, this.state);\n        newState.activeWord = word;\n        newState.display = selectedGame;\n        this.setState(newState);\n\n    }\n\n    findValidGame(gamePool, word) {\n        const games = this.state.games;\n        const validGames = [];\n        let selectedGame;\n\n        gamePool.forEach(game => {\n            if (games[game].validWordTypes.includes(word.type)) {\n                validGames.push(game);\n            }\n        });\n\n        selectedGame = validGames[utils.getRandomInt(validGames.length)];\n\n        return selectedGame;\n    }\n\n    render() {\n        const display = this.state.display;\n        const word = this.state.activeWord;\n        const currentGame = this.state.currentGame;\n        const totalGames = this.state.totalGames;\n        let game;\n\n        if (display === \"menu\") {\n            return (\n                <div>\n                    <div id=\"main-view\">\n                        <MainMenu \n                        optionsHandler={(event) => this.optionsHandler(event)} \n                        startHandler={(event) => this.startHandler(event)}\n                        lessons={this.state.lessons} \n                        games={this.state.games} />\n                    </div>\n                </div>\n            );\n        } else if (display === \"loading\") {\n            return (\n                <div>\n                    <div id=\"main-view\" class=\"center-text\">\n                        <h1>Loading, please wait...</h1>\n                    </div>\n                </div>\n            );\n        } else if (display === \"results\") {\n                return (\n                    <div>\n                        <div id=\"main-view\">\n                            <ResultsMenu\n                                correct={this.state.correctGames}\n                                total={this.state.totalGames}\n                                results={this.state.results}\n                                resetHandler={() => this.resetHandler()}\n                            />\n                        </div>\n                    </div>\n                );\n        } else {\n            if (display === \"adj-types\") game = <AdjectiveTypeGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"etoj\") game = <EngToJapGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"jtoe\") game = <JapToEngGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"adj-pres-conj\") game = <AdjConjPresentGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"adj-past-conj\") game = <AdjContPastGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"adj-short-past-conj\") game = <AdjConjShortPresentGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"adj-te-conj\") game = <AdjConjTeGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"verb-types\") game = <VerbTypeGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"verb-pres-conj\") game = <VerbConjPresentGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"verb-past-conj\") game = <VerbConjPastGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"verb-pres-short-conj\") game = <VerbConjShortPresentGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"verb-te-conj\") game = <VerbConjTeGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"verb-root\") game = <VerbRootGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"kanji-reading\") game = <KanjiReadingGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"kanji-definition\") game = <KanjiDefinitionGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"kwtoe\") game = <KanjiWordToEngGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n            else if (display === \"kwtoj\") game = <KanjiWordToJapGame key={word.english+word.romaji} word={word} nextHandler={(correct) => this.nextHandler(correct)}/>;\n\n            return (\n                <div>\n                    <div id=\"main-view\" class=\"center-text\">\n                        <div>{currentGame}/{totalGames}</div>\n                        {game}\n                    </div>\n                </div>\n            );\n        }\n    }\n    \n}\n\nReactDOM.render(\n    <div>\n        <MainView />\n        <div class=\"copyright center-text\">\n            <p>\n            Copyright © 2021 Noah Curoe. All Rights Reserved <br/>\n            The GENKI name is Copyright © The Japan Times Publishing, Ltd. \n            This site is in no way affiliated with \n            The Japan Times Publishing, Ltd. or any of its partners.\n            </p>\n        </div>\n    </div>,\n    document.getElementById('root')\n);","function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\n\nfunction populate(obj, keyPath, value) {\n    let lastKeyIndex = keyPath.length-1;\n    for (var i = 0; i < lastKeyIndex; ++ i) {\n      let key = keyPath[i];\n      if (!(key in obj)){\n        obj[key] = {}\n      }\n      obj = obj[key];\n    }\n    obj[keyPath[lastKeyIndex]] = value;\n}\n\nmodule.exports = { getRandomInt, populate }"],"sourceRoot":""}